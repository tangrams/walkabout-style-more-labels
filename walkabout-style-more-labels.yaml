# Walkabout is an outdoor style perfect for hiking or getting out and about, with
# mountains, ski trails, biking paths, and transit stops.
#
# Give OpenStreetMap data a professional basemap skin using the Tangram graphics library
# and Mapzen's versatile Vector Tiles.
#
# Please use and adapt the open source scene file in your own projects!
#
# Authors: Geraldine Sarmiento, Nathaniel V. Kelso
# Read more: https://github.com/tangrams/walkabout-style
#

import:
    # Layers
    - layers/bike-interlay.yaml
    - layers/path-interlay.yaml

global:
    # Sign up for a Mapzen API key to enjoy higher rate limits
    # https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
    sdk_mapzen_api_key: ''     # set this value to your Mapzen API key

    #ux/ui
    ux_language: false             # l10n language code, trusting OSM in v0.10 tiles, fixed in v1.0 tiles
    ux_language_fallback: false    # l10n language code, trusting OSM in v0.10 tiles, fixed in v1.0 tiles
    ux_language_text_source: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;
        }
    ux_language_text_source_boundary_lines: |
        function() {
            var right = (global.ux_language && feature['name:right:'+global.ux_language]) || (global.ux_language_fallback && feature['name:right:'+global.ux_language_fallback]) || feature['name:right'];
            var left = (global.ux_language && feature['name:left:'+global.ux_language]) || (global.ux_language_fallback && feature['name:left:'+global.ux_language_fallback]) || feature['name:left'];
            if( right && left ) {
                //if( right.includes(' ') || left.includes(' ') ) {
                    return left + " - " + right;
                //} else {
                //    return right + '\n' + left;
                //}
            } else {
                return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;
            }
        }
    ux_language_text_source_short: |
        function() {
            return (global.ux_language && feature['name:short:'+global.ux_language]) || (global.ux_language_fallback && feature['name:short:'+global.ux_language_fallback]) || feature['name:short'];
        }
    ux_language_text_source_short_proxy_name: |
        function() {
            var name  = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            var short = (global.ux_language && feature['name:short:'+global.ux_language]) || (global.ux_language_fallback && feature['name:short:'+global.ux_language_fallback]) || feature['name:short'];
            return short ? name : '';
        }
    ux_language_text_source_abbreviation: |
        function() {
            var name  = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            var abbrev = (global.ux_language && feature['name:abbreviation:'+global.ux_language]) || (global.ux_language_fallback && feature['name:abbreviation:'+global.ux_language_fallback]) || feature['name:abbreviation'];
            return abbrev || name;
        }
    ux_language_text_source_iata: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.iata) {
                if (name) {
                    return name + ' (' + feature.iata + ')';
                }
                else {
                    return feature.iata;
                }
            } else {
                return name;
            }
        }
    ux_language_text_source_ocean: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            name = name.split(' ').join('\n');
            return name.split('').join('  ');
        }
    ux_language_text_source_sea: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            name = name.split(' ').join('\n');
            return name.split('').join(' ');
        }
    ux_language_text_source_continent_stacked_only: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            return name.split(' ').join('\n');
        }
    ux_language_text_source_continent: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            name = name.split(' ').join('\n');
            return name.split('').join(' ');
        }
    ux_language_text_source_road_ref_and_name: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.ref && name) {
                return (feature.ref + ' ' + name);
            } else {
                return name;
            }
            */
        }
    ux_language_text_source_road_ref_and_name_short: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (feature.ref && (feature.ref.length < 6) && name) {
                return feature.ref + ' ' + name;
            } else {
                return name;
            }
            */
        }
    ux_language_text_source_piste_advanced: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            return name ? ('◆ ' + name) : '◆';
        }
    ux_language_text_source_piste_expert: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            return name ? ('◆◆ ' + name) : '◆◆';
        }
    ux_language_text_source_building_and_address: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (name && feature.addr_housenumber) {
                return name + '\n' + feature.addr_housenumber;
            } else {
                return name;
            }
        }

    # To facilitate data visualizations several recommended sort orders are provided
    #
    # Your classic raster map overlay.
    # Over all line and polygon features.
    # Under map labels (icons and text), under UI elements
    # (like routeline and search result pins).
    sdk_order_over_everything_but_text_0: 490
    sdk_order_over_everything_but_text_1: 491
    sdk_order_over_everything_but_text_2: 492
    sdk_order_over_everything_but_text_3: 493
    sdk_order_over_everything_but_text_4: 494
    sdk_order_over_everything_but_text_5: 495
    sdk_order_over_everything_but_text_6: 496
    sdk_order_over_everything_but_text_7: 497
    sdk_order_over_everything_but_text_8: 498
    sdk_order_over_everything_but_text_9: 499
    #
    # Your classic "underlay"
    # Under roads. Above borders, water, landuse, and earth.
    sdk_order_under_roads_0: 290
    sdk_order_under_roads_1: 291
    sdk_order_under_roads_2: 292
    sdk_order_under_roads_3: 293
    sdk_order_under_roads_4: 294
    sdk_order_under_roads_5: 295
    sdk_order_under_roads_6: 296
    sdk_order_under_roads_7: 297
    sdk_order_under_roads_8: 298
    sdk_order_under_roads_9: 299
    #
    # Under water.
    # Above earth and most landuse.
    sdk_order_under_water_0: 190
    sdk_order_under_water_1: 191
    sdk_order_under_water_2: 192
    sdk_order_under_water_3: 193
    sdk_order_under_water_4: 194
    sdk_order_under_water_5: 195
    sdk_order_under_water_6: 196
    sdk_order_under_water_7: 197
    sdk_order_under_water_8: 198
    sdk_order_under_water_9: 199
    #
    # Under everything.
    # Tip: disable earth layer.
    sdk_order_under_everything_0: 0
    sdk_order_under_everything_1: 1
    sdk_order_under_everything_2: 2
    sdk_order_under_everything_3: 3
    sdk_order_under_everything_4: 4
    sdk_order_under_everything_5: 5
    sdk_order_under_everything_6: 6
    sdk_order_under_everything_7: 7
    sdk_order_under_everything_8: 8
    sdk_order_under_everything_9: 9
    #
    # TRANSIT OVERLAY
    # should default to "auto", with SDK overriding it to true or false,
    # or app logic sets other booleans that triggers auto behavior later
    sdk_transit_overlay: false
    #
    # SHIELDS
    sdk_shield_color: black
    sdk_shield_text_color: white
    #
    # enable interactivity for key features
    sdk_interactive: true
    #
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    sdk_building_extrude: true              # building extrusion toggle
    #
    #labels-global:
    text_visible_continent:         true
    text_visible_island:            true
    text_visible_admin:             true
    text_visible_populated_places:  true
    icon_visible_populated_places:  true
    text_visible_neighbourhoods:    true
    text_visible_neighbourhoods_e:  true
    text_visible_building:          true            # false for default
    text_visible_address:           true            # false for default
    text_visible_water_labels:      true
    label_visible_landuse_green:    true            #this needs work
    icon_visible_landuse_green:     true            #this needs work
    icon_size_green:                [[13, '14px'], [16, '18px'], [18, '19px']]    # 0px for no, default, more  [[13, '14px'], [16, '18px'], [18, '19px']]
    icon_size_green_l:              [[14, '24px'], [16, '32px']]                  # 0px for no, default, more  [[14, '24px'], [16, '32px']]
    text_visible_landuse_green:     true
    label_visible_poi_landuse:      true
    icon_visible_poi_landuse:       true           #false for default
    text_visible_poi_landuse:       true           #false for default
    label_visible_poi_landuse_e:    true
    icon_visible_poi_landuse_e:     true           #false for default
    text_visible_poi_landuse_e:     true
    text_visible_landuse_generic:   true
    label_visible_station:          true           #false for default
    icon_visible_station:           true           #false for default
    text_visible_station:           true           #false for default
    text_visible_highway:           true
    text_visible_highway_e:         true           #false for default
    text_visible_trunk_primary:     true
    text_visible_trunk_primary_e2:  true           #false for default
    text_visible_trunk_primary_e:   true           #false for default
    text_visible_secondary:         true
    text_visible_secondary_e:       true           #false for default
    text_visible_tertiary:          true
    text_visible_tertiary_e:        true           #false for default
    text_visible_minor_road:        true
    text_visible_minor_road_e:      true
    text_visible_service_road:      true
    text_visible_path:              true
    text_visible_piste:             true
    text_visible_steps:             true
    text_visible_aerialway:         true
    sdk_road_shields:               true
    text_visible_exits:             true
    text_visible_exits_e:           true           #false for default
    text_visible_airport_gate:      true

    #cameras:
    camera_settings: { type: isometric, axis: [-.2, .2] }

    #lights:
    light_settings: { type: directional, direction: [1, 1, -.9], diffuse: 0.5, ambient: 0.85 }

    #roads:
    highway1:                   [1.00,1.00,1.00]
    highway_link1:              [0.00, 0.00, 0.00]
    highway_casing1:            [0.894,0.906,0.914]
    highway_tunnel1:            [0.930,0.930,0.930]
    highway_tunnel_casing1:     [0.894,0.906,0.914]
    highway_link_tunnel_casing1: [0.350,0.350,0.350]
    ferry1:                     [0.410,0.750,0.833]
    rail1:                      '#999'
    rail1_e:                    '#bbb'
    rail2:                      '#777'             # less important rail (service, sidings)
    major_road1:                [1.0, 1.0, 1.0]
    major_road1b:               [0.935, 0.935, 0.935]
    major_road1c:               white    #15%
    major_road2:                [0.935, 0.935, 0.935]
    major_road2a:               [0.935, 0.935, 0.935]
    major_road2b:               [0.935, 0.935, 0.935]
    major_road3:                [0.935, 0.935, 0.935]
    major_road4:                [0.00, 0.00, 0.00]
    major_road5:                white
    major_casing1:              [0.40, 0.40, 0.40]        # same as highway_casing1
    major_casing2:              [0.40, 0.40, 0.40]        # zoomed out
    major_tunnel1:              [0.930,0.930,0.930]
    major_tunnel_casing1:       [0.695,0.739,0.790]
    major_route1:               [0.0, 0.0, 0.0]
    major_route2:               [0.2, 0.2, 0.2]           # zoomed out
    minor_route:                [0.97, 0.97, 0.97]        # same as major_route
    minor_road1:                [0.935, 0.935, 0.935]     # natural earth
    minor_road2:                [1.00,1.00,1.00]     # natural earth, same as major_road2
    minor_road3:                [0.935, 0.935, 0.935]
    minor_road4:                [0.935, 0.935, 0.935]     # zoomed out
    minor_road5:                [0.935, 0.935, 0.935]     # zoomed out, again
    minor_casing1:              white                     # same as highway_casing1
    minor_casing2:              white                     # zoomed out
    minor_tunnel1:              [0.929,0.929,0.929]
    minor_tunnel_casing1:       [0.695,0.739,0.790]
    service_road1:              [0.935, 0.935, 0.935]
    service_road2:              white
    service_road_casing1:       [0.40, 0.40, 0.40]
    service_road_casing2:       white
    path1:                      [0.97, 0.97, 0.97]
    path2:                      [0.97, 0.97, 0.97]        # zoomed out
    path_casing1:               [0.40, 0.40, 0.40]
    path_bridge_casing1:        [0.40, 0.40, 0.40]
    path_bridge_casing2:        [0.40, 0.40, 0.40]        # zoomed out
    path_steps1:                red
    path_steps1_b:              '#ccc'
    piste_easy:                 [0.367,0.750,0.622]
    piste_intermediate:         [0.420,0.678,0.863]
    piste_advanced:             [0.450,0.450,0.450]
    piste_expert:               [0.450,0.450,0.450]

    #boundaries:
    country_boundary:           [1.00,1.00,1.00]
    region_boundary:            [1.00,1.00,1.00]
    subregion_boundary:         [1.00,1.00,1.00]
    city_wall:                  [0.682,0.682,0.682]
    retaining_wall:             [0.827,0.808,0.780]
    snow_fence:                 [0.827,0.808,0.780]
    fence:                      [0.827,0.808,0.780]
    dam:                        [0.827,0.808,0.780]

    #areas:
    scene1:      white                    # map background
    water1:      [0.870, 0.870, 0.870]    # water wave
    water2:      [0.760, 0.760, 0.760]    # water wave
    water3:      [0.5, 0.5, 0.5]          # playa texture
    water1_o:    '#fff'                   # water stroke (ocean coastline)
    water2_o:    '#d1d1d1'                # water stroke 2 (streams, lake outlines)
    earth1:      white                    # land color
    earth2:      '#e9e4e0'                # urban
    earth2_v:    false                    # urban
    green1:      [0.50,0.50,0.50]         # park
    green1_r:    '#bbbbbb'                # park roads
    green1_b:    [.65, .65, .65]          # park buildings
    green1_bo:   [.8, .8, .8]             # park building outlines
    green2:      [0.90,0.90,0.90]         # cemetery
    green3:      '#9a9a9a'                # golf course
    green4:      [0.90,0.90,0.90]         # farm faint
    green4_v:    false                    # farm faint
    green5:      [0.75,0.75,0.75]         # farm
    green6:      [0.40,0.40,0.40]         # nature reserve
    green7:      [0.85,0.85,0.85]         # forest
    green8:      [0.80,0.80,0.80]         # conservation
    green9:      [0.85,0.85,0.85]         # forest (landcover)
    green9_e:    [0.90,0.90,0.90]         # forest (landcover) early
    green9_v:    true                     # forest (landcover) visibility
    green10:     [0.85,0.85,0.85]         # sports_centre
    green11:     [0.85,0.85,0.85]         # minor zoo related AOIs
    green11_o:   [0.85,0.85,0.85]         # minor zoo related AOIs outline
    orange1:     '#aaaaaa'                # stadium
    orange2:     [0.40,0.40,0.40]         # pitch (play field)
    brown1:      '#7b7b7b'                # university
    brown1_r:    '#bbbbbb'                # university roads
    brown1_b:    [.65, .65, .65]          # university buildings
    brown1_bo:   [.8, .8, .8]             # university building outlines
    brown2:      '#aaaaaa'                # school
    brown3:      [0.40,0.40,0.40]         # playground
    red1:        '#a2a2a2'                # hospital
    red1_r:      '#bbbbbb'                # hospital roads
    red1_b:      [.65, .65, .65]          # hospital buildings
    red1_bo:     [.8, .8, .8]             # hospital building outlines
    gray-all:    [0.935,0.960,0.970]      # default gray for landuse outdoor style
    grey1:       '#cccccc'                # pedestrian, retail, airport apron, parking, church
    grey1_e:     '#dad6d4'                # pedestrian, retail, airport apron, parking, church early zoom 14
    grey1_v:     true                     # pedestrian, retail, airport apron, parking, church
    grey2:       [0.5, 0.5, 0.5]          # airport runway
    grey3:       '#bbbbbb'                # railway
    grey4:       '#ffc52a'                # airport taxiway
    grey5:       '#ffc52a'                # airport taxiway
    grey6:       '#dddddd'                # industrial
    grey6_b:     [.65, .65, .65]          # industrial buildings
    grey6_bo:    [.8, .8, .8]             # industrial building outlines
    grey7:       '#ecebe9'                # pedestrian, match minor road / path color
    grey7_v:     true                     # pedestrian visibility
    grey8:       '#ecebe9'                # winter sports
    grey8_v:     true                     # winter sports visibility
    grey9:       [.7, .0, .0, 0.5]        #[.7, .7, .7]        # transit platform
    grey9_o:     [.5, .5, .5]             # transit platform outline
    grey9_v:     true                     # transit platform visibility
    grey10:      '#d4cce6'                # generic major landuse (theme park, resort, aquarium, winery)
    grey10_o:    '#bcb9c5'                # generic major landuse outline
    grey11:      '#d7d7d7'                # generic minor landuse (attraction, artwork)
    grey11_o:    '#cccccc'                # generic minor landuse outline
    grey12:      '#cfcfcf'                # generic minor amusements (roller coasters, rides, slide, carousel)
    grey12_o:    '#c5c5c5'                # generic minor amusements
    purple:      '#f0e1e1'                # airport
    purple_v:    true                     # airport
    mystry1:     '#aaaaaa'                # recreation ground (type of park, sometimes around reservoirs)
    building1:   white                    # building
    building2:   white                    # building stroke
    building_o:  25                       # building stroke order
    building_e:  true                     # building stroke order

    #labels:
    text_fill:          '#000'                  # WHITE
    text_fill2:         '#000'                  # WHITE
    text_fill_road_e:   '#555'                  # WHITE
    text_fill_exits:    [0.40,0.40,0.40]        # motorway junctions, highway_casing1
    text_fill_building: '#000'                  # tan
    text_fill_address:  [0.60,0.60,0.60]        # HUH
    text_fill_water:    [0.354,0.531,0.620]     # blue
    text_fill_park:     [0.175,0.175,0.175]     # green
    text_fill_beach:    [0.35,0.35,0.35]        # black
    text_fill_piste:    [0.350,0.350,0.350]     # dark gray
    text_fill_piste_e:  [0.350,0.350,0.350]     # dark gray early
    text_stroke:        [0.913,0.925,0.933]     # land color
    text_stroke_park:   [0.913,0.925,0.933]     # land color
    text_stroke_water:  [0.913,0.925,0.933]
    text_stroke_address:   [0.913,0.925,0.933]  # address stroke color
    townspot_sprite:    townspot-m-rev          # depends on land color and text settings
    text_font_family:   'Open Sans'             # branding in asperational Unicode, yo (or Helvetica)

cameras:
    camera1: global.camera_settings

scene:
    background:
        color: [0.945,0.945,0.945]   #f2f2f2
    # animated: true

fonts:
    Open Sans:
        - weight: 300 # Light
          url: fonts/OpenSans-Light.woff
        - weight: normal # Regular
          url: fonts/OpenSans-Regular.woff
        - weight: normal # Regular
          style: italic
          url: fonts/OpenSans-Italic.woff
        - weight: 600 # Semi Bold
          url: fonts/OpenSans-Semibold.woff
        - weight: 600 # Semi Bold
          style: italic
          url: fonts/OpenSans-SemiboldItalic.woff
        - weight: bold
          url: fonts/OpenSans-Bold.woff
    Montserrat:
        - weight: normal
          #url: https://fonts.gstatic.com/s/montserrat/v7/zhcz-_WihjSQC0oHJ9TCYL3hpw3pgy2gAi-Ip7WPMi0.woff
          url: fonts/Montserrat-Regular.woff

textures:
    pois:
        url: images/walkabout@2x.png
        #url: https://raw.githubusercontent.com/tangrams/walkabout-style/gh-pages/images/walkabout%402x.png
        filtering: mipmap
        sprites:
            # define sprites: [x origin, y origin, width, height]
            'US:CA-1char': [0, 942, 82, 92]
            'US:CA-2char': [915, 846, 93, 94]
            'US:CA-3char': [794, 846, 114, 92]
            'US:CA-4char': [664, 846, 124, 92]
            'US:CA-5char': [528, 846, 128, 92]
            'US:I-1char': [774, 942, 90, 100]
            'US:I-2char': [446, 470, 102, 102]
            'US:I-3char': [308, 470, 132, 100]
            'US:I-4char': [160, 470, 140, 100]
            'US:I-5char': [0, 470, 152, 100]
            'US:NY-1char': [176, 666, 72, 88]
            'US:NY-2char': [460, 574, 88, 88]
            'US:NY-3char': [348, 574, 104, 86]
            'US:NY-4char': [224, 574, 116, 86]
            'US:NY-5char': [96, 574, 120, 86]
            'US:PA-1char': [96, 666, 72, 88]
            'US:PA-2char': [0, 666, 88, 88]
            'US:PA-3char': [820, 574, 112, 88]
            'US:PA-4char': [692, 574, 120, 88]
            'US:PA-5char': [556, 574, 128, 88]
            'US:US-1char': [678, 942, 90, 96]
            'US:US-2char': [568, 942, 106, 94]
            'US:US-3char': [422, 944, 138, 98]
            'US:US-4char': [260, 942, 156, 100]
            'US:US-5char': [88, 942, 164, 100]
            airport: [952, 0, 38, 38]
            aerodrome: [952, 0, 38, 38]
            allotments: [874, 252, 38, 38]
            aquarium: [230, 210, 38, 38]
            arrow: [552, 294, 38, 38]
            atm: [0, 168, 38, 38]
            attraction: [872, 210, 38, 38]
            bakery: [640, 168, 38, 38]
            bank: [46, 168, 38, 38]
            category-predicate-money: [46, 168, 38, 38]
            bar: [322, 168, 38, 38]
            pub: [322, 168, 38, 38]
            category-predicate-drink: [322, 168, 38, 38]
            baseball: [552, 84, 38, 38]
            basketball: [506, 84, 38, 38]
            battlefield: [138, 252, 38, 38]
            bbq: [552, 252, 38, 38]
            beach: [690, 84, 38, 38]
            beach_resort: [46, 252, 38, 38]
            bench: [630, 0, 38, 38]
            bicycle: [964, 126, 38, 38]
            bicycle_rental: [964, 126, 38, 38]
            bicycle_rental_station: [964, 126, 38, 38]
            bicycle_parking: [736, 126, 38, 38]
            biergarten: [780, 210, 38, 38]
            brewery: [780, 210, 38, 38]
            bike_bicycle: [962, 168, 38, 38]
            bike_bicycle_parking: [92, 210, 38, 38]
            bike_bicycle_rental_station: [46, 210, 38, 38]
            bike_bicycle_rental: [46, 210, 38, 38]
            bike_bicycle_repair_station: [0, 210, 38, 38]
            bike_cafe: [824, 168, 38, 38]
            bike_cycle_barrier: [732, 168, 38, 38]
            bike_drinking_water: [870, 168, 38, 38]
            bike_pub: [779, 168, 38, 38]
            bike_toilets: [916, 168, 38, 38]
            boat_rental: [920, 252, 38, 38]
            books: [918, 126, 38, 38]
            bridge: [966, 84, 38, 38]
            buddhist: [828, 84, 38, 38]
            building: [506, 168, 38, 38]
            hangar: [506, 168, 38, 38]
            nursing_home: [506, 168, 38, 38]
            manor: [506, 168, 38, 38]
            apartments: [506, 168, 38, 38]
            care_home: [506, 168, 38, 38]
            bus_station: [860, 0, 38, 38]
            bus_stop: [860, 0, 38, 38]
            butcher: [0, 84, 38, 38]
            cafe: [594, 168, 38, 38]
            camp_site: [874, 84, 38, 38]
            capital-l: [726, 294, 32, 32]
            capital-m: [694, 294, 24, 24]
            capital-s: [664, 294, 20, 20]
            capital-xl: [814, 294, 42, 36]
            capital-xs: [642, 294, 16, 16]
            car: [872, 126, 38, 38]
            category-namespace-mobility: [872, 126, 38, 38]
            category-predicate-mobility: [872, 126, 38, 38]
            car_repair: [92, 168, 38, 38]
            car_sharing: [676, 0, 38, 38]
            caravan_site: [276, 252, 38, 38]
            castle: [460, 42, 38, 38]
            fort: [460, 42, 38, 38]
            cemetery: [782, 84, 38, 38]
            grave_yard: [782, 84, 38, 38]
            christian: [276, 126, 38, 38]
            cinema: [276, 210, 38, 38]
            clothes: [322, 210, 38, 38]
            fashion: [322, 210, 38, 38]
            college: [368, 210, 38, 38]
            university: [368, 210, 38, 38]
            confectionery: [504, 210, 38, 38]
            convenience: [138, 84, 38, 38]
            county_shield-1char: [256, 666, 72, 72]
            county_shield-2char: [0, 574, 88, 72]
            county_shield-3char: [868, 470, 104, 72]
            county_shield-4char: [724, 470, 136, 72]
            county_shield-5char: [556, 470, 160, 72]
            courthouse: [446, 0, 38, 38]
            dam: [368, 294, 38, 38]
            dentist: [266, 0, 38, 38]
            department_store: [826, 126, 38, 38]
            doctors: [224, 0, 38, 38]
            clinic: [224, 0, 38, 38]
            dog_park: [460, 252, 38, 38]
            dot-black: [506, 294, 38, 38]
            dot-white: [322, 294, 38, 38]
            drinking_water: [734, 210, 38, 38]
            dry_cleaning: [92, 84, 38, 38]
            electronics: [690, 126, 38, 38]
            computer: [690, 126, 38, 38]
            enclosure: [414, 294, 38, 38]
            estate_agent: [184, 42, 38, 38]
            factory: [460, 168, 38, 38]
            industrial: [460, 168, 38, 38]
            chimney: [460, 168, 38, 38]
            substation: [460, 168, 38, 38]
            wastewater_plant: [460, 168, 38, 38]
            works: [460, 168, 38, 38]
            water_works: [460, 168, 38, 38]
            plant: [460, 168, 38, 38]
            generator: [460, 168, 38, 38]
            category-predicate-industry: [460, 168, 38, 38]
            fast_food: [642, 210, 38, 38]
            ferry: [906, 0, 38, 38]
            ferry_terminal: [906, 0, 38, 38]
            fire_station: [400, 0, 38, 38]
            firepit: [414, 252, 38, 38]
            fishing: [322, 252, 38, 38]
            fishing_area: [322, 252, 38, 38]
            fitness: [966, 42, 38, 38]
            fitness_station: [966, 42, 38, 38]
            florist: [230, 126, 38, 38]
            forest: [550, 210, 38, 38]
            natural_forest: [550, 210, 38, 38]
            nature_reserve: [550, 210, 38, 38]
            conservation: [550, 210, 38, 38]
            protected_area: [550, 210, 38, 38]
            grass: [550, 210, 38, 38]
            fountain: [368, 126, 38, 38]
            fuel: [458, 210, 38, 38]
            gallery: [138, 210, 38, 38]
            garden: [736, 84, 38, 38]
            gas_canister: [46, 294, 38, 38]
            gate: [460, 294, 38, 38]
            generic: [596, 294, 38, 38]
            category-namespace-other: [596, 294, 38, 38]
            category-predicate-addressing: [596, 294, 38, 38]
            generic_shield-1char: [928, 666, 72, 72]
            generic_shield-2char: [824, 666, 98, 72]
            generic_shield-3char: [684, 666, 132, 72]
            generic_shield-4char: [524, 666, 152, 72]
            generic_shield-5char: [336, 666, 180, 72]
            geyser: [0, 252, 38, 38]
            gift: [184, 126, 38, 38]
            golf_course: [460, 84, 38, 38]
            government: [230, 168, 38, 38]
            townhall: [230, 168, 38, 38]
            public: [230, 168, 38, 38]
            embassy: [230, 168, 38, 38]
            category-predicate-civic: [230, 168, 38, 38]
            hairdresser: [92, 42, 38, 38]
            hardware: [920, 42, 38, 38]
            doityourself: [920, 42, 38, 38]
            painter: [920, 42, 38, 38]
            historical: [138, 126, 38, 38]
            hospital: [182, 0, 38, 38]
            category-namespace-health: [182, 0, 38, 38]
            category-predicate-health: [182, 0, 38, 38]
            hot_spring: [322, 84, 38, 38]
            hotel: [814, 0, 38, 38]
            motel: [814, 0, 38, 38]
            hostel: [814, 0, 38, 38]
            category-predicate-sleep: [814, 0, 38, 38]
            hunting: [962, 210, 38, 38]
            ice_cream: [826, 210, 38, 38]
            information: [918, 210, 38, 38]
            jewelry: [782, 42, 38, 38]
            jewish: [44, 0, 38, 38]
            landmark: [354, 0, 38, 38]
            memorial: [354, 0, 38, 38]
            monument: [354, 0, 38, 38]
            tower: [354, 0, 38, 38]
            beacon: [354, 0, 38, 38]
            laundry: [736, 42, 38, 38]
            library: [0, 0, 38, 38]
            light_rail: [768, 0, 38, 38]
            tram_stop: [768, 0, 38, 38]
            lighthouse: [276, 84, 38, 38]
            liquor: [598, 126, 38, 38]
            alcohol: [598, 126, 38, 38]
            mall: [690, 42, 38, 38]
            marina: [184, 168, 38, 38]
            dock: [184, 168, 38, 38]
            mine: [828, 42, 38, 38]
            mobile_phone: [552, 42, 38, 38]
            motorcycle: [690, 252, 38, 38]
            museum: [92, 126, 38, 38]
            music: [414, 42, 38, 38]
            muslim: [90, 0, 38, 38]
            newspaper: [368, 42, 38, 38]
            kiosk: [368, 42, 38, 38]
            observatory: [0, 294, 38, 38]
            office: [644, 84, 38, 38]
            insurance: [644, 84, 38, 38]
            company: [644, 84, 38, 38]
            category-predicate-service: [644, 84, 38, 38]
            optician: [322, 42, 38, 38]
            outdoor: [138, 294, 38, 38]
            park: [322, 126, 38, 38]
            national_park: [322, 126, 38, 38]
            protected_area: [322, 126, 38, 38]
            category-predicate-nature: [322, 126, 38, 38]
            parking: [782, 126, 38, 38]
            peak: [230, 84, 38, 38]
            pet: [276, 42, 38, 38]
            pharmacy: [46, 84, 38, 38]
            photographic_laboratory: [230, 42, 38, 38]
            photographer: [230, 42, 38, 38]
            picnic_site: [644, 252, 38, 38]
            picnic_table: [644, 252, 38, 38]
            pier: [722, 0, 38, 38]
            place_of_worship: [368, 168, 38, 38]
            chapel: [368, 168, 38, 38]
            wayside_shrine: [368, 168, 38, 38]
            category-predicate-religion: [368, 168, 38, 38]
            playground: [506, 42, 38, 38]
            police: [308, 0, 38, 38]
            post_office: [414, 168, 38, 38]
            quarry: [874, 42, 38, 38]
            mineshaft: [874, 42, 38, 38]
            adit: [874, 42, 38, 38]
            ranger_station: [598, 252, 38, 38]
            recreation_track: [782, 252, 38, 38]
            recycling: [138, 42, 38, 38]
            restaurant: [596, 210, 38, 38]
            category-namespace-eat_and_drink: [596, 210, 38, 38]
            category-predicate-eat: [596, 210, 38, 38]
            retail: [644, 42, 38, 38]
            store: [644, 42, 38, 38]
            category-namespace-shop_and_service: [644, 42, 38, 38]
            category-predicate-shop: [644, 42, 38, 38]
            ruin: [584, 0, 38, 38]
            ruins: [584, 0, 38, 38]
            archaeological_site: [584, 0, 38, 38]
            school: [598, 84, 38, 38]
            kindergarten: [598, 84, 38, 38]
            category-namespace-education_and_religion: [598, 84, 38, 38]
            category-predicate-education: [598, 84, 38, 38]
            scuba_diving: [92, 294, 38, 38]
            dive_centre: [92, 294, 38, 38]
            sdk_shield-1char: [740, 758, 84, 84]
            sdk_shield-2char: [832, 758, 112, 84]
            sdk_shield-3char: [0, 846, 144, 84]
            sdk_shield-4char: [152, 846, 168, 84]
            sdk_shield-5char: [328, 846, 192, 84]
            sdk_solid_shield-1char: [0, 758, 84, 84]
            sdk_solid_shield-2char: [92, 758, 112, 84]
            sdk_solid_shield-3char: [212, 758, 144, 84]
            sdk_solid_shield-4char: [364, 758, 168, 84]
            sdk_solid_shield-5char: [540, 758, 192, 84]
            shoemaker: [598, 42, 38, 38]
            shower: [230, 252, 38, 38]
            ski: [414, 126, 38, 38]
            winter_sports: [414, 126, 38, 38]
            ski_rental: [414, 126, 38, 38]
            ski_school: [414, 126, 38, 38]
            ski_jumping: [414, 126, 38, 38]
            skiing: [414, 126, 38, 38]
            slipway: [184, 252, 38, 38]
            soccer: [414, 84, 38, 38]
            sports: [276, 168, 38, 38]
            pitch: [276, 168, 38, 38]
            sports_centre: [276, 168, 38, 38]
            recreation_ground: [276, 168, 38, 38]
            spring: [368, 84, 38, 38]
            stadium: [506, 126, 38, 38]
            subway_entrance: [538, 0, 38, 38]
            summer_camp: [828, 252, 38, 38]
            supermarket: [644, 126, 38, 38]
            greengrocer: [644, 126, 38, 38]
            swimming_area: [368, 252, 38, 38]
            swimming_pool: [552, 126, 38, 38]
            tailor: [46, 42, 38, 38]
            telescope: [966, 252, 38, 38]
            tennis: [460, 126, 38, 38]
            theatre: [686, 168, 38, 38]
            category-predicate-fun: [686, 168, 38, 38]
            theme_park: [46, 126, 38, 38]
            amusement_ride: [46, 126, 38, 38]
            toilets: [920, 84, 38, 38]
            townspot-l: [132, 338, 32, 32]
            townspot-l-rev: [942, 294, 32, 32]
            townspot-m: [100, 338, 24, 24]
            townspot-m-rev: [910, 294, 24, 24]
            townspot-s: [72, 338, 20, 20]
            townspot-s-rev: [882, 294, 20, 20]
            townspot-xl: [172, 338, 40, 40]
            townspot-xl-rev: [0, 340, 42, 42]
            townspot-xs: [48, 338, 16, 16]
            townspot-xs-rev: [862, 294, 12, 12]
            toys: [0, 42, 38, 38]
            traffic_signals: [414, 210, 38, 38]
            trailhead: [184, 294, 38, 38]
            train_station: [492, 0, 38, 38]
            station: [492, 0, 38, 38]
            category-predicate-transport: [492, 0, 38, 38]
            tree: [230, 294, 38, 38]
            tree-s: [276, 294, 38, 38]
            ux-current-location: [674, 338, 88, 88]
            ux-locate-off: [300, 338, 72, 72]
            ux-locate-on: [220, 338, 72, 72]
            ux-route-arrow: [380, 338, 128, 128]
            ux-route-start: [594, 338, 72, 92]
            ux-route-stop: [516, 338, 72, 92]
            ux-search-active: [768, 338, 72, 108]
            ux-search-inactive: [848, 338, 72, 108]
            ux-transit-stop: [766, 296, 42, 36]
            veterinary: [136, 0, 38, 38]
            viewpoint: [184, 210, 38, 38]
            category-namespace-do_and_see: [184, 210, 38, 38]
            category-predicate-attraction: [184, 210, 38, 38]
            vineyard: [138, 168, 38, 38]
            volcano: [184, 84, 38, 38]
            water_park: [92, 252, 38, 38]
            water_slide: [92, 252, 38, 38]
            water_tower: [736, 252, 38, 38]
            waterfall: [506, 252, 38, 38]
            wine: [688, 210, 38, 38]
            winery: [548, 168, 38, 38]
            zoo: [0, 126, 38, 38]

    building-grid:
        url: images/building-grid.gif
        #url: https://raw.githubusercontent.com/tangrams/walkabout-style/gh-pages/images/building-grid.png
        filtering: mipmap

sources:
    mapzen:
        type: MVT
        # prod
        url:  https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.mvt
        # dev
        #url:  https://tile.dev.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: global.sdk_mapzen_api_key
        rasters: [normals]
        max_zoom: 16
    normals: # normals
        type: Raster
        # prod
        url: https://tile.mapzen.com/mapzen/terrain/v1/normal/{z}/{x}/{y}.png
        # dev
        #url: https://tile.dev.mapzen.com/mapzen/terrain/v1/normal/{z}/{x}/{y}.png
        url_params:
            api_key: global.sdk_mapzen_api_key
        max_zoom: 15

#    # Only enable this for local debug, should not be enabled for prod (app inserts these at runtime)
#    # These are all in San Francisco, California
#    #
#    # Current location gem
#    mz_current_location:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/9e9588228b0a604264a2/raw/b28be49bea0b7feb859eb65b588c28e9fee5ae2c/map.geojson
#    # Route line
#    mz_route_line:
#        type: GeoJSON
#        # sf to ny
#        # url: https://gist.githubusercontent.com/anonymous/30c6c1a75c168d91d90c/raw/92bfe55e622766d250b1f2f5d17bdc7c26acb956/map.geojson
#        # local sf trip
#        url: https://gist.githubusercontent.com/anonymous/9a610ebda6fe4be7bccc/raw/8d217e43f2412d48d01534ba115f1e42dac72e68/map.geojson
#    # Dashed route line
#    mz_dash_line:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/d73b851c64c3e5fbfc2754aa32f44c10/raw/938ae435776e176919c4797bed1465a92e403ef3/map.geojson
#    # Transit route line
#    mz_route_line_transit:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/71ae88cbc6d62c4d141ecd6a61060050/raw/2254bbc18243f5dc609e663a580c9412a7447936/map.geojson
#    # Pin at start of route
#    mz_route_start:
#       type: GeoJSON
#       url: https://gist.githubusercontent.com/anonymous/5262969cb7549ea69221/raw/be03f233fa323d9b5cf50ef1d8e89a1faa3750f1/map.geojson
#    # Pin at end of route
#    mz_route_destination:
#       type: GeoJSON
#       url: https://gist.githubusercontent.com/anonymous/dbae9635dfe46796490e/raw/df55c318635a7d91b309ed40754d4738a292fd38/map.geojson
#    # Arrow for current route location
#    mz_route_location:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/36613092be6e2aa004fd/raw/f753d13069425199e1dea1b449ef67d723f6510e/map.geojson
#    # Dots for transit stops in route preview
#    mz_route_transit_stop:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/b9f16bca4a804f50faf71277d52ee4ab/raw/db13e4e765fa1ac8844b8ba02f4a0f66fe772907/map.geojson
#    # Pins showing search result locations
#    mz_search_result:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/57dc09eeb120919f76de/raw/43426217da3c2bae0522dc4257aaa61e4df3981e/map.geojson
#    # Default point styling (SDK)
#    mz_default_point:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/16324c771edfce45be0721390389b878/raw/7dbaebf17da7da8562e6c6f8768bc8cff83efa88/map.geojson
#    # Default shield styling (SDK)
#    mz_default_shield:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/nvkelso/3c08dba1eced4d01df98c1a9a7801162/raw/d83a5a396fc7b22309b8ca89336ad2dcfff6c452/map.geojson
#    # Default line styling (SDK)
#    mz_default_line:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/26f4e8b6b34b2617b5d5533d89decb39/raw/df8e180ab4f7f19448014dccc4a755f7cfa20003/map.geojson
#    # Default polygon styling (SDK)
#    mz_default_polygon:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/88235c795bb44b8c45150bdd5561f947/raw/71d4fab97b6513833bf1a589167119e6169ef86d/map.geojson

styles:
    highlight:
        base: lines
    dots-lines:
        base: lines
        lighting: false
        texcoords: true
        blend: overlay
        shaders:
            defines:
                dotSize: .1
            blocks:
                color: |
                    vec2 st = fract(v_texcoord.xy);
                    st -= .5;
                    color.a = 1.- step(dotSize, dot(st,st)*2.);
    dashed:
        base: lines
        dash: [2.25, 1.25]
        dash_background_color: [0.808,0.860,0.851]
    dashed_steps:
        base: lines
        dash: [0.5, 0.25]
        dash_background_color: [0.760,0.785,0.805]
    dashed_small:
        base: lines
        dash: [0.5, 0.5]
        dash_background_color: [0.867, 0.867, 0.867]
    dashed_big:
        base: lines
        dash: [2.0, 1.0]
        dash_background_color: [0.808,0.860,0.851]
    dashed_tunnel:
        base: lines
        dash: [5, 3]
        #dash_background_color: red
    terrain:
        base: polygons
        lighting: false
        raster: normal
        shaders:
            uniforms:
                u_envmap: images/draw-test10.jpg
                u_contrast: 1.
                u_brightness: 1.
                u_zoom_scale: 3.5
            blocks:
                global: |
                    // Simplified view-independent environment map
                    vec4 applyEnvmap (in sampler2D _tex, in vec3 _normal, in float scale) {
                        _normal.z *= scale;
                        return texture2D(_tex, .5*(normalize(_normal).xy + 1.));
                    }
                color: |
                    // turn terrain exaggeration up/down
                    // fade out spheremap normals with a function
                    float scale1 = 20./(u_map_position.z) + 1.5;
                    float m = u_zoom_scale * (u_map_position.z - 0.8) * exp(u_map_position.z * -.29);
                    m = clamp(m, 0., 1.5);
                    color = applyEnvmap(u_envmap, normal, 1./scale1);

                    // apply contrast and brightness
                    float contrast = m;
                    color.rgb = ((color.rgb - 0.5) * max(contrast, 0.)) + 0.5;
                    float brightness = .5 - m * .5;
                    color.rgb += brightness;

                    // apply layer color
                    color *= v_color;

    terrain-park:
        mix: terrain
        shaders:
            uniforms:
                u_envmap: images/walkabout-green1.jpg
                u_zoom_scale: 3.95

    # HSV/RGB functions
    hsv:
        shaders:
            blocks:
                global: |
                    vec3 rgb2hsv(vec3 c)
                    {
                        vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
                        vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
                        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
                        float d = q.x - min(q.w, q.y);
                        float e = 1.0e-10;
                        return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
                    }
                    vec3 hsv2rgb(vec3 c)
                    {
                        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
                        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
                    }

    scale-buildings:
        shaders:
            blocks:
                position: |
                    // scale buildings based on zoom
                    float zoom = u_map_position.z;
                    float min = .1;       // minimum building scale
                    float midpoint = 16.; // middle of zoom range
                    float inspeed = .1;   // number of zooms to scale buildings up
                    float outspeed = 2.;  // number of zooms to scale buildings back down
                    float e = 0.;

                    if (zoom >= midpoint) {
                        e = (zoom - midpoint) / (outspeed * .2);
                    } else {
                        e = abs(zoom - midpoint) / inspeed;
                    }
                    position.z *= ((1. - min) / (1. + (exp(e)))) + min;

    building-grid:
        base: polygons
        lighting: false
        mix: [hsv, scale-buildings]
        texcoords: true
        shaders:
            uniforms:
                u_tex_grid: building-grid
            defines:
                WALL_TINT: vec3(0.950, 0.950, 0.950)
            blocks:
                color: |
                    if (dot(vec3(0., 0., 1.), worldNormal()) < 1.0 - TANGRAM_EPSILON) {
                        // If it's a wall
                        color.rgb = hsv2rgb(rgb2hsv(color.rgb) * WALL_TINT);
                        color.rgb = mix(color.rgb, vec3(0.),
                                        texture2D(u_tex_grid, v_texcoord).a);
                    }

    building-lines:
        base: lines
        mix: scale-buildings
        texcoords: true
    icons:
        base: points
        texture: pois
        blend_order: 1
    background-icons:
        base: points
        texture: pois
        blend_order: 0
    text-blend-order:
        base: text
        blend_order: 1
    lines_transparent:
        base: lines
        blend: overlay
    polygons_transparent:
        base: polygons
        blend: overlay
    ux-route-line-overlay:
        base: lines
        blend: overlay
        blend_order: 0
    ux-route-line-dash-overlay:
        base: lines
        blend: overlay
        blend_order: 0
        dash: [2, 1]
    ux-transit-line-overlay:
        base: lines
        blend: overlay
        blend_order: 0
    ux-location-gem-overlay:
        base: points
        texture: pois
        interactive: global.sdk_interactive
        blend: overlay
        blend_order: 2
    ux-icons-overlay:
        base: points
        texture: pois
        interactive: global.sdk_interactive
        blend: overlay
        blend_order: 3
    sdk-point-overlay:
        base: points
        texture: pois
        interactive: global.sdk_interactive
        blend: overlay
        blend_order: 3
    sdk-shield-overlay:
        base: points
        texture: pois
        interactive: global.sdk_interactive
        blend: overlay
        blend_order: 3
    sdk-line-overlay:
        base: lines
        blend: overlay
        blend_order: 0
    sdk-polygon-overlay:
        base: polygons
        blend: overlay
        blend_order: 0

layers:
    # Map overlays for styling the server response (using special source layer names) for route line, current location, and search result pins
    mz_route_line:
        data: { source: mz_route_line }
        draw:
            ux-route-line-overlay:
                color: '#06a6d4'
                order: 500
                width: [[0,3.5px],[5,5px],[9,7px],[10,6px],[11,6px],[13,8px],[14,9px],[15,10px],[16,11px],[17,12px],[18,10px]]
    mz_route_line_dash:
        data: { source: mz_dash_line }
        draw:
            ux-route-line-dash-overlay:
                color: '#06a6d4'
                order: 500
                width: [[2,2px],[5,2.5px],[11,3px],[16,7px],[17,9px]]
    mz_route_line_transit:
        data: { source: mz_route_line_transit }
        draw:
            ux-transit-line-overlay:
                # each transit route segment could be a different "line" each with it's own color
                # but some transit lines don't define a color, in those cases default to blue
                # and since the color is coming from Transit.land they call it "color" instead of "colour"
                color: function() { return feature.color || '#06a6d4'; }
                order: 500
                width: [[0,3.5px],[5,5px],[9,7px],[10,6px],[11,6px],[13,8px],[14,9px],[15,10px],[16,11px],[17,12px],[18,10px]]


    mz_current_location_gem:
        data: { source: mz_current_location }
        draw:
            ux-location-gem-overlay:
                sprite: ux-current-location
                size: 36px
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_location:
        data: { source: mz_route_location }
        draw:
            ux-location-gem-overlay:
                sprite: ux-route-arrow
                size: [60px,60px]
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_start:
        data: { source: mz_route_start }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                priority: 1
                sprite: ux-route-start
                size: [36px,46px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_destination:
        data: { source: mz_route_destination }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                priority: 1
                sprite: ux-route-stop
                size: [36px,46px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_transit_stop:
        data: { source: mz_route_transit_stop }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                sprite: ux-transit-stop
                size: [15px,15px]
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_search_result:
        data: { source: mz_search_result }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                sprite: ux-search-active
                size: [36px,54px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }
        inactive:
            filter: { state: inactive }
            draw:
                ux-icons-overlay:
                    sprite: ux-search-inactive
    mz_dropped_pin:
        data: { source: mz_dropped_pin }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                sprite: ux-search-active
                size: [36px,54px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }

    # Used by the SDK to place point, line, and polygon overlays on the map
    mz_default_point:
        data: { source: mz_default_point }
        draw:
            sdk-point-overlay:
                interactive: global.sdk_interactive
                sprite: ux-search-active
                size: [36px,54px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_default_shield:
        data: { source: mz_default_shield }
        draw:
            sdk-shield-overlay:
                interactive: global.sdk_interactive
                sprite: |
                    function() {
                        if( feature.shield_text ) {
                            return ('sdk_shield-' + feature.shield_text.length + 'char');
                        } else {
                            return ('sdk_shield-' + feature.name.length + 'char');
                        }
                    }
                sprite_default: sdk_shield-1char
                color: global.sdk_shield_color
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
                text:
                    # offset: [0px, -1px]
                    text_source: |
                        function() {
                            if( feature.shield_text ) {
                                return feature.shield_text;
                            } else {
                                return feature.name;
                            }
                        }
                    anchor: center
                    font:
                        family: Montserrat
                        fill: global.sdk_shield_text_color
                        style: bold
                        size: [[7,7px],[12,8px],[16,11px]]

        width_1char:
            filter: |
                function() {
                    if( feature.shield_text ) {
                        return (feature.shield_text.length === 1);
                    } else {
                        return (feature.name.length === 1);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[16px,16px]],[13,[18px,18px]],[16,[21px,21px]]]
        width_2char:
            filter: |
                function() {
                    if( feature.shield_text ) {
                        return (feature.shield_text.length === 2);
                    } else {
                        return (feature.name.length === 2);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[21px,16px]],[13,[24px,18px]],[16,[28px,21px]]]
        width_3char:
            filter: |
                function() {
                    if( feature.shield_text ) {
                        return (feature.shield_text.length === 3);
                    } else {
                        return (feature.name.length === 3);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[27px,16px]],[13,[31px,18px]],[16,[36px,21px]]]
        width_4char:
            filter: |
                function() {
                    if( feature.shield_text ) {
                        return (feature.shield_text.length === 4);
                    } else {
                        return (feature.name.length === 4);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[32px,16px]],[13,[36px,18px]],[16,[41px,21px]]]
        width_5char:
            filter: |
                function() {
                    if( feature.shield_text ) {
                        return (feature.shield_text.length === 5);
                    } else {
                        return (feature.name.length === 5);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[37px,16px]],[13,[41px,18px]],[16,[48px,21px]]]
        # this is kinda a hack
        width_longggggg:
            filter: |
                function() {
                    if( feature.shield_text ) {
                        return (feature.shield_text.length > 5);
                    } else {
                        return (feature.name.length > 5);
                    }
                }
            draw:
                sdk-shield-overlay:
                    visible: false
    mz_default_line:
        data: { source: mz_default_line }
        draw:
            sdk-line-overlay:
                color: '#06a6d4'
                order: 503
                width: 3px
    mz_default_polygon:
        data: { source: mz_default_polygon }
        draw:
            sdk-polygon-overlay:
                color: [0.02,0.65,0.82,0.5]  #'#06b1e2'
                order: 501
            sdk-line-overlay:
                color: '#06a6d4'
                order: 502
                width: 0px

    # Basemap styling
    earth:
        data: { source: mapzen}
        draw:
            terrain:
                order: function() { return feature.sort_rank || 0; }
                color: [1.0, 1.0, 1.0]
            text-blend-order:
                text_source: global.ux_language_text_source
            lines:
                visible: false

        #natural-overlay:
#            filter: { kind: [cliff, arete, ridge, valley] }
#            draw:
#                lines:
#                    order: 999
#            #cliff:
#    #            filter: { kind: cliff }
#    #            draw:
#    #                lines:
#    #                    color: blue
#    #                    width: 0.2px
#    #                    order: 1001
#            #arete:
#    #            filter: { kind: arete }
#    #            draw:
#    #                lines:
#    #                    color: red
#    #                    width: 0.2px
#    #                    order: 1000
        ridge_valley:
            filter: { kind: [ridge, valley] }
            draw:
                text-blend-order:
                    priority: 50
                    font:
                        fill: black
                        weight: 200
                        size: 10px
                        style: italic
                        stroke: { color: [0.894,0.906,0.914], width: 3 }

        continent:
            filter: { kind: [continent], $zoom: {max: 5} }
            draw:
                text-blend-order:
                    visible: global.text_visible_continent
                    text_source: global.ux_language_text_source_continent_stacked_only
                    text_wrap: false
                    font:
                        family: global.text_font_family
                        size: [[1,11px],[3,14px]]
                        style: italic
                        fill: global.text_fill
                        weight: normal
                        transform: uppercase
            continent-spacer:
                filter: { $zoom: { min: 2 } }
                draw:
                    text-blend-order:
                        text_source: global.ux_language_text_source_continent
        island:
            filter: { kind: [archipelago, island, islet] }
            draw:
                text-blend-order:
                    visible: global.text_visible_island
                    text_wrap: 10
                    font:
                        family: global.text_font_family
                        size: 12px
                        style: italic
                        fill: global.text_fill
                        weight: normal
                        stroke: { color: global.text_stroke, width: 4 }
                        #transform: uppercase

    water:
        data: { source: mapzen, layer: water }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                #color: [0.608,0.925,0.965]
        later:
            filter: { $zoom: { min: 12 } }
            draw:
                polygons:
                    order: function() { return feature.sort_rank + 1; }
                    #color: [0.608,0.925,0.965]

        lakes:
            filter:
                all:
                    - kind: [ocean, lake, water, riverbank, reservoir, swimming_pool]
                # WARNING: any area filters here must match the area filters in the water_boundaries-not-ocean layer
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: { min: 0 },  area: { min: 40000000000 } }
                    - { $zoom: { min: 2 },  area: { min: 20000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: { min: 3 },  area: { min: 80000000000 } }
                    - { $zoom: { min: 4 },  area: { min: 5000000000 } }
                    - { $zoom: { min: 5 },  area: { min: 700000000 } }
                    - { $zoom: { min: 6 },  area: { min: 500000000 } }
                    - { $zoom: { min: 7 },  area: { min: 160000000 } }
                    - { $zoom: { min: 8 },  area: { min: 40000000 } }
                    - { $zoom: { min: 9 },  area: { min: 10000000 } }
                    - { $zoom: { min: 10 }, area: { min: 8000000 } }
                    - { $zoom: { min: 11 }, area: { min: 2000000 } }
                    - { $zoom: { min: 12 }, area: { min: 200000 } }
                    - { $zoom: { min: 13 }, area: { min: 100000 } }
                    - { $zoom: { min: 14 }, area: { min: 2000 } }
                    - { $zoom: { min: 15 } }
            draw:
                polygons:
                    # color: [0.608,0.925,0.965] ## original color
                    # color: [0.528,0.902,0.960] ## more saturated
                    color: [0.432,0.890,0.960] ## even more saturated
        playas:
            filter: { kind: playa, $zoom: {min: 6} }
            draw:
                dashed_small:
                    order: function() { return feature.sort_rank; }
                    color: grey
                    width: 1px
                polygons_transparent:
                    color: [0.85,0.85,0.85, 0.5]
        other-water-areas:
            filter: { not: { kind: [ocean, lake, water, reservoir, playa] }, $zoom: { min: 11 }, area: { min: 100 } }
            draw:
                polygons:
                    color: [0.432,0.890,0.960]
        swimming_pool:
            filter: { kind: swimming_pool }
            draw:
                polygons:
                    color: [0.432,0.890,0.960]
        water-boundary-ocean-early:
            filter: { boundary: true, kind: ocean, $zoom: {min: 1, max: 17} }
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: [0.431,0.806,0.914]
                    width: 1px
                    join: round
        water-boundary-ocean-late:
            filter: { boundary: true, kind: ocean, $zoom: {min: 17} }
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: [0.431,0.806,0.914]
                    width: 1px
                    join: round
        water_boundaries-not-ocean:
            # filter: { boundary: true, not: { kind: [ocean,playa] }, $zoom: { min: 8 } }
            filter:
                all:
                    - boundary: true
                    - not: { kind: [ocean,playa] }
                    - $zoom: { min: 8}
                # WARNING: any area filters here must match the area filters in the lakes layer
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: { min: 1 },  area: { min: 40000000000 } }
                    - { $zoom: { min: 2 },  area: { min: 20000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: { min: 3 },  area: { min: 80000000000 } }
                    - { $zoom: { min: 4 },  area: { min: 5000000000 } }
                    - { $zoom: { min: 5 },  area: { min: 700000000 } }
                    - { $zoom: { min: 6 },  area: { min: 500000000 } }
                    - { $zoom: { min: 7 },  area: { min: 160000000 } }
                    - { $zoom: { min: 8 },  area: { min: 40000000 } }
                    - { $zoom: { min: 9 },  area: { min: 10000000 } }
                    - { $zoom: { min: 10 }, area: { min: 8000000 } }
                    - { $zoom: { min: 11 }, area: { min: 2000000 } }
                    - { $zoom: { min: 12 }, area: { min: 200000 } }
                    - { $zoom: { min: 13 }, area: { min: 100000 } }
                    - { $zoom: { min: 14 }, area: { min: 2000 } }
                    - { $zoom: { min: 15 } }
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    # color: [0.625,0.806,0.822]
                    color: [0.431,0.806,0.914]
                    width: 1px
                    join: round
            early:
                filter: { $zoom: { min: 14 } }
                draw:
                    lines:
                        order: 241
            swimming-pools-early:
                filter: { kind: swimming_pool, $zoom: { max: 19 } }
                draw:
                    lines:
                        visible: false
            riverbank:
                # river boundaries like the thames in london, la seine in paris
                filter: { kind: riverbank }
                draw:
                    lines:
                        color: [0.431,0.806,0.914]
                        width: 1px
        river:
            #river center lines, not boundaries for polygons
            filter: { kind: [river,canal,stream,dam,ditch,drain], $zoom: { min: 11 }, not: { is_tunnel: true } }
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: [[10,[0.472,0.834,0.890]],[14,[0.511,0.877,0.930]]]
                    # color: [0.592,0.929,0.961]
                    #color: [[11,[0.753,0.820,0.835]],[12,[0.710,0.800,0.824]],[13,[0.886,0.937,0.988]]]
                    #width: [[14,2.5px],[15,4.0px],[17,8.0px],[18,10.0px]]
                    width: [[10,0px],[11,0.75px],[12,1.0px],[13,1.25px],[14,2.25px],[15,3px],[16,4px],[17,5m]]
                    cap: round
                    outline:
                        #color: [[11,[0.671,0.788,0.812]],[13,[0.710,0.800,0.824]],[14,[0.635,0.812,0.843]]]
                        width: [[9,0px],[11,0px],[12,0px],[13,0.5px],[14,0.75px],[15,0.75px],[16,0.75px],[17,1px]]
            not-river-early:
                filter: { $zoom: [11,12], not: { kind: river } }
                draw:
                    lines:
                        width: [[11,0px], [12,0.6px]]
            intermittent:
                filter:
                    any:
                        - intermittent: [true]
                        - kind: drain
                draw:
                    lines:
                        visible: false
                    dots-lines:
                        order: function() { return feature.sort_rank; }
                        color: [[10,[0.472,0.834,0.890]],[14,[0.511,0.877,0.930]]]
                        width: [[10,0px],[11,0.5px],[12,1px],[13,2px],[14,3px],[15,4px],[16,5px]]

        water-line-labels:
            visible: global.text_visible_water_labels
            filter:
                all:
                    - name: true
                    - $geometry: line
                    - kind: [river,canal,stream,dam,ditch,drain]
                    - $zoom: { min: 11 }
            draw:
                text-blend-order:
                    text_source: global.ux_language_text_source
                    font:
                        fill: global.text_fill_water
                        family: global.text_font_family
                        style: italic
                        weight: normal
                        size: [[12,10px],[17,14px]]
            not-river-not-stream:
                filter: { kind: [canal,dam,ditch,drain], $zoom: { max: 14 } }
                draw:
                    text-blend-order:
                        visible: false
            stream:
                filter: { kind: [stream], $zoom: { max: 14 } }
                draw:
                    text-blend-order:
                        visible: false

        water-area-labels:
            visible: global.text_visible_water_labels
            filter:
                all:
                    - name: true
                    - $geometry: point
                    - not: { kind: [riverbank, dock, playa] }
                    - area: true
                any:
                    # show labels for smaller landuse areas at higher zooms
                    - { $zoom: { min: 5 },  area: { min: 10000000000 } }
                    - { $zoom: { min: 6 },  area: { min: 5000000000 } }
                    - { $zoom: { min: 7 },  area: { min: 400000000 } }
                    - { $zoom: { min: 8 },  area: { min: 200000000 } }
                    - { $zoom: { min: 9 },  area: { min: 100000000 } }
                    - { $zoom: { min: 10 }, area: { min: 100000000 } }
                    - { $zoom: { min: 11 }, area: { min: 10000000 } }
                    - { $zoom: { min: 12 }, area: { min: 2000000 } }
                    - { $zoom: { min: 13 }, area: { min: 1000000 } }
                    - { $zoom: { min: 14 }, area: { min: 500000 } }
                    - { $zoom: { min: 15 }, area: { min: 100000 } }
                    - { $zoom: { min: 15 }, area: { min: 50000 } }
                    - { $zoom: { min: 16 }, area: { min: 20000 } }
                    - { $zoom: { min: 17 } }
            default-label-text:
                draw:
                    text-blend-order:
                        text_source: global.ux_language_text_source
                        font:
                            fill: global.text_fill_water
                            family: global.text_font_family
                            style: italic
                            weight: 400
                            size: 12px
                            # stroke: { color: [0.878,0.929,0.980], width: 2 }
            lakes-z5:
                filter: { $zoom: [5] }
                draw:
                    text-blend-order: { font: { size: 9px } }
            lakes-z6:
                filter: { $zoom: [6] }
                draw:
                    text-blend-order: { font: { size: 11px } }
            lakes-z8:
                filter: { $zoom: [8] }
                draw:
                    text-blend-order: { font: { size: 12px } }

        ocean-sea-labels:
            visible: global.text_visible_water_labels
            filter: { name: true, kind: [sea, ocean] }
            draw:
                text-blend-order:
                    text_source: global.ux_language_text_source
                    font:
                        fill: global.text_fill_water
                        family: global.text_font_family
                        weight: normal
                        size: 12px
                        transform: uppercase
            ocean-spacer:
                filter: { kind: ocean }
                ocean-spacer-z1-z4:
                    filter: { $zoom: { min: 1, max: 4 } }
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source_sea
                            text_wrap: false
                ocean-spacer-z4-up:
                    filter: { $zoom: { min: 4 } }
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source_ocean
                            text_wrap: false
            ocean-labels:
                draw:
                    text-blend-order:
                        font:
                            size: [[1,8px],[2,10px],[3,13px],[4,16px]]

            sea-early:
                filter: { $zoom: [3], kind: sea }
                draw: { text-blend-order: { visible: false } }
            sea-spacer:
                filter: { not: { kind: [ocean] }, $zoom: { min: 4 } }
                draw:
                    text-blend-order:
                        text_source: global.ux_language_text_source_sea
                        text_wrap: false

            sea-labels:
                filter: { not: { kind: [ocean] } }
                draw:
                    text-blend-order:
                        font:
                            fill: [0.350,0.350,0.350]
                            size: [[4,8px],[6,11px],[8,14px]]

    roads:
        data: { source: mapzen, layer: roads }
        draw:
            lines:
                #color: black
                width: 1px
                order: function() { return feature.sort_rank; }
                # but give them all the same outline
                outline:
                    order: 352
            text-blend-order:
                visible: false    # labels are enabled by each layer below
                text_source: global.ux_language_text_source
                font:
                    family: global.text_font_family
                    weight: 500
                    fill: global.text_fill

        arrows:
            # oneway arrows and shields are distinct groups!
            filter: { oneway: yes, shield_text: false, $zoom: { min: 17 } }
            draw:
                arrows:
                    style: icons
                    flat: true
                    visible: true
                    sprite: arrow
                    size: [[17, 6px], [20, 14px]]
                    placement: spaced
                    placement_spacing: [[17, 70px], [20, 175px]]
                    angle: auto

        early:
            filter: { $zoom: { max: 14 } }
            draw:
                lines:
                    outline:
                        order: function() { return feature.sort_rank; }
        bridges-tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    #cap: butt
                    outline:
                        # except bridges and tunnels, their outlines should also self-sort
                        order: function() { return feature.sort_rank; }

        # default outlines starting at zoom 16
        default-outline-width:
            filter: { $zoom: { min: 16 } }
            draw:
                lines:
                    outline:
                        width: function () { return 3/16 * Math.log($zoom); }

        natural_earth_highways:
            filter: { source: 'naturalearthdata.com', $zoom: { max: 8 } }
            draw:
                lines:
                    color: [[5, [0.50,0.50,0.50]], [6, [0.350,0.350,0.350]]]
                    width: [[5, 0.5px], [8, 1.25px]]
                    outline:
                        color: global.highway_casing1
                        width: 0px
            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        color: [[5, [0.75,0.75,0.75]], [8, [0.40,0.40,0.40]]]
                        width: [[5, 0.25px], [9, 0.75px]]
                        outline:
                            width: [[8, 0.0px], [9, 0.0px], [11, .5px], [16, .75px]]
            minor_road:
                filter: { kind: minor_road }
                draw:
                    lines:
                        color: global.minor_road1
                        width: 0.5px
            ferry:
                filter: { kind: ferry }
                draw:
                    lines:
                        color: global.ferry1
                        width: 0.5px
                        outline:
                            width: 0px
        highway:
            filter: { kind: highway, $zoom: { min: 8 } }
            draw:
                lines:
                    color: [[8, [0.457,0.438,0.457]], [10, [0.548,0.483,0.491]], [11, [1.00,1.00,1.00]]]
                    width: [[8, 1.25px], [12, 1.5px], [14, 2.5px], [16, 6.5px], [17, 10px], [18, 10m]]
                    outline:
                        color: [[8, [0.969,0.969,0.969]], [10, [0.969,0.969,0.969]], [11, [0.548,0.483,0.491]]]
                        width: [[8, 1px], [10, 1px], [12, 1.5px], [14, 1.75px], [16, 2.5px], [18, 4px]]
            early:
                filter: { $zoom: { max: 15 } }          # was max: 15 (11)
                draw:
                    lines:
                        outline:
                            order: function() { return feature.sort_rank; }
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [[11, [0.627,0.612,0.616]], [13, [0.627,0.612,0.616]], [14, [1.00,1.00,1.00]]]
                        width: [[8, 0px], [11, 0.4px], [12, 0.6px], [14, 1.25px], [16, 3px], [18, 5m]]
                        outline:
                            color: [[11, [0.969,0.969,0.969]], [13, [0.969,0.969,0.969]], [14, [0.548,0.483,0.491]]]
                            width: [[8, 0px], [9, 0px], [13, 0px], [14, 0.6px], [16, 1.25px], [18, 2px]]
                early_link:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            order: 352
                    z12-13:
                        filter: { $zoom: { max: 14 } }
                        draw:
                            lines:
                                order: 351
                tunnel-link:
                    filter: { is_tunnel: true, $zoom: { min: 13 } }
                    draw:
                        lines:
                            color: [0.929,0.929,0.929]
                            outline:
                                color: [0.695,0.739,0.790]
            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [0.929,0.929,0.929]
                        outline:
                            color: [0.695,0.739,0.790]
            highway_bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt
            labels-highway:
                filter:
                    $zoom: { min: 13 }
                draw:
                    text-blend-order:
                        priority: 50
                        visible: global.text_visible_highway
                        font:
                            fill: [0.408,0.427,0.459]
                            weight: 600
                            size: [[13, 11px], [15, 12px], [17, 15px], [19, 16px]]
                            stroke: { color: [[13, [0.898,0.906,0.910]], [16,[1.000,1.000,1.000]]], width: 4px }

        major_road:
            filter: { kind: major_road }
            # default style
            draw:
                lines:
                    color: [[8, [0.529,0.556,0.592]], [13, [0.529,0.556,0.592]], [15, [1.00,1.00,1.00]]]
                    width: [[10, 0px], [13, 0.5px], [16, 2.5px], [18,3px]]
            trunk_primary:
                filter: { kind_detail: [trunk, primary] }
                draw:
                    lines:
                        color: [[10, [0.603,0.620,0.642]], [11, [1.00,1.00,1.00]]]
                        width: [[8, 0.5px], [10, 1px], [12, 1px], [14, 2.5px], [16, 6px], [17, 8.25px], [18, 10m]]
                        outline:
                            color: [[8, [0.969,0.969,0.969]], [10, [0.969,0.969,0.969]], [11, [0.629,0.612,0.615]], [14, [0.659,0.626,0.648]]]
                            width: [[8, 0.5px], [10, 1px], [14, 1px], [16, 2.25px], [17, 3px], [18, 4px]]
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 2; }
                    primary:
                        filter: { kind: [primary] }
                        draw:
                            lines:
                                outline:
                                    order: function() { return feature.sort_rank + 1; }
                routes:
                    filter: { ref: true }
                    draw:
                        lines:
                            color: [[8, [0.603,0.620,0.642]], [10, [0.603,0.620,0.642]], [11, [1.00,1.00,1.00]]]
                            width: [[8, 1px], [12, 1px], [14, 2.5px], [16, 6.5px], [17, 9px], [18, 10m]]
                            outline:
                                color: [[8, [0.969,0.969,0.969]], [10, [0.969,0.969,0.969]], [11, [0.629,0.612,0.615]], [14, [0.659,0.626,0.648]]]
                                width: [[9, 1px], [10, 1px], [12, 1.25px], [16, 2.25px], [17, 3px], [18, 4px]]
                    early:
                        filter: { $zoom: { max: 13 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    earlyz-13:
                        filter: { $zoom: [13] }
                        draw:
                            lines:
                                order: 352
                                outline:
                                    order: function() { return feature.sort_rank + 1; }
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [0.883,0.904,0.930]
                                outline:
                                    color: [0.640,0.703,0.780]
                    labels-trunk_primary-route:
                        filter: { $zoom: { min: 14 } }
                        draw:
                            text-blend-order:
                                priority: 51
                                visible: global.text_visible_trunk_primary
                                font:
                                    fill: [0.495,0.511,0.532]
                                    weight: 600
                                    size: [[14, 11px],[15, 12px], [18, 16px]]
                                    stroke: { color: [[14, global.text_stroke], [15,[0.969,0.973,0.973]]], width: [[15, 3px], [16, 4px]] }
                        z14:
                            filter: { $zoom: [14] }
                            draw:
                                text-blend-order:
                                    visible: global.text_visible_trunk_primary_e2
                                    font:
                                        weight: normal  # or 500 or 400?
                labels-trunk_primary-z11-up:
                    filter:
                        $zoom: { min: 11 }
                    draw:
                        text-blend-order:
                            priority: 51
                            visible: global.text_visible_trunk_primary_e
                            font:
                                fill: [0.495,0.511,0.532]
                                size: [[11, 9px], [12, 10px], [13, 11px], [14, 11px], [15, 12px], [16, 13px],[ 18, 13px],[19, 16px]]
                                stroke: { color: [[11, global.text_stroke], [15, [0.969,0.973,0.973]]], width: [[11, 2px], [15, 4px], [16, 4px], [17, 6px]] }
                    z16:
                        filter: { $zoom: [16] }
                        draw:
                            text-blend-order:
                                visible: global.text_visible_trunk_primary
                                font:
                                    weight: 600
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [[11, [0.627,0.612,0.616]], [13, [0.627,0.612,0.616]], [14, [1.00,1.00,1.00]]]
                        width: [[8, 0px], [11, 0.4px], [12, 0.6px], [14, 1.25px], [16, 3px], [18, 5m]]
                        outline:
                            color: [[11, [0.969,0.969,0.969]], [13, [0.969,0.969,0.969]], [14, [0.670,0.623,0.654]]]
                            width: [[8, 0px], [9, 0px], [13, 0px], [14, 0.6px], [16, 1.25px], [18, 2px]]
                early_link:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        lines:
                            order: 351
            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [0.883,0.904,0.930]
                        outline:
                            color: [0.640,0.703,0.780]
            secondary:
                filter: { kind_detail: secondary }
                draw:
                    lines:
                        color: [1.00,1.00,1.00]
                        width: [[10, 0px], [11, 0px], [12, 1px], [14, 2px], [16, 5px], [17, 7.5px], [18, 9m]]
                        outline:
                            color: [[9, [0.906,0.906,0.906]], [10, [0.788,0.780,0.800]], [11, [0.787,0.763,0.767]], [14, [0.659,0.626,0.648]]]
                            width: [[10, 0px], [11, 0.5px], [12, 1px], [14, 1px], [16, 2.25px], [18, 4px]]
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: 353 #function() { return feature.sort_rank + 2; }
                    earlyz-13:
                        filter: { $zoom: [13] }
                        draw:
                            lines:
                                outline:
                                    order: function() { return feature.sort_rank + 1; }
                routes:
                    filter: { ref: true, $zoom: { min: 8 } }
                    draw:
                        lines:
                            color: [[10, [0.584,0.604,0.624]], [11, [1.00, 1.00, 1.00]]]
                            width: [[8, 0px], [10, 0.7px], [11, 1px], [12, 1px], [14, 2px], [16, 5px], [17, 7.5px], [18, 9m]]
                            outline:
                                color: [[9, [0.906,0.906,0.906]], [10, [0.906,0.906,0.906]], [11, [0.787,0.763,0.767]], [14, [0.659,0.626,0.648]]]
                                width: [[9, 0.25px], [10, 0.75px], [11, 0.75px], [12, 1px], [14, 1px], [16, 2.25px], [18, 4px]]
                    early:
                        filter: { $zoom: { max: 14 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                        # earlyz-13:
                        #     filter: { $zoom: [13] }
                        #     draw:
                        #         lines:
                        #             order: 352
                        #             outline:
                        #                 order: function() { return feature.sort_rank + 1; }
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [0.929,0.929,0.929]
                                outline:
                                    color: [0.695,0.739,0.790]
                    labels-secondary-routes-z13-up:
                        filter: { $zoom: { min: 13 } }
                        draw:
                            text-blend-order:
                                priority: 56
                                visible: global.text_visible_secondary_e
                                font:
                                    fill: [0.536,0.556,0.581]
                                    size: [[13, 11px], [15, 11px], [16, 12px]]
                                    stroke: { color: [[13, global.text_stroke], [16, [0.969,0.973,0.973]]], width: 4px }
                        z15-up:
                            filter: { $zoom: { min: 15 } }
                            draw:
                                text-blend-order:
                                    visible: global.text_visible_secondary
                                    font:
                                        weight: 600
                labels-secondary:
                    filter:
                        $zoom: { min: 13 }
                    draw:
                        text-blend-order:
                            priority: 56
                            visible: global.text_visible_secondary_e
                            font:
                                fill: [0.536,0.556,0.581]
                                size: [[13, 9px], [14, 9px], [15, 10px], [16, 12px], [17, 13px]]
                                stroke: { color: [[13, global.text_stroke], [15, [0.969,0.973,0.973]]], width: 4px }
            tertiary:
                filter: { kind_detail: [tertiary, tertiary_link] }
                draw:
                    lines:
                        color: [1.00, 1.00, 1.00]
                        width: [[11, 0.1px], [12, 0.1px], [13, 1px], [14, 2px], [16, 3.5px], [17, 6px], [18, 9m]]
                        outline:
                            color: [[11, [0.847,0.822,0.826]], [12, [0.797,0.770,0.775]], [14, [0.714,0.694,0.706]]]
                            width: [[11, 0.4px], [12, 0.3px], [14, 1px], [16, 2px], [17, 2px], [18, 4px]]
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 3; }
                routes:
                    filter: { ref: true, $zoom: { min: 11 } }
                    draw:
                        lines:
                            color: [1.00,1.00,1.00]
                            width: [[11, 1px], [12, 1px], [14, 2px], [16, 3.5px], [17, 6px], [18, 9m]]
                            outline:
                                color: [[11, [0.788,0.780,0.800]], [12, [0.797,0.770,0.775]]]
                                width: [[11, 1px], [12, 1px], [14, 1px], [16, 2px], [17, 2px], [18, 4px]]
                    early:
                        filter: { $zoom: { max: 14 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 3; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: {is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [0.929,0.929,0.929]
                                outline:
                                    color: global.major_tunnel_casing1
                # this was needed in the past, but where is an example map location to debug now? hmm.
                # link:
                #     filter: { is_link: true } # on- and off-ramps, etc
                #     draw:
                #         lines:
                #             color: [[14, [0.714,0.733,0.760]], [15, [0.578,0.608,0.650]], [16, [0.533,0.555,0.586]], [17, [1.00,1.00,1.00]]]
                #             width: [[11, 0.0px], [12, 0.15px], [14, 0.15px], [15, 0.75px], [16, 1.25px], [17, 2px], [18, 2px], [19, 4px]]
                #             outline:
                #                 color: [[11, [1.00,1.00,1.00]], [16, [1.00,1.00,1.00]], [17,[0.578,0.608,0.650]]]
                #                 width: [[11, 0px], [16, 0px], [17, 1px], [18, 1px]]
                labels-tertiary:
                    filter:
                        $zoom: { min: 13 }
                    draw:
                        text-blend-order:
                            priority: 57
                            visible: global.text_visible_tertiary
                            font:
                                fill: [0.536,0.556,0.581]
                                size: [[13, 9px], [15, 10px], [16, 12px], [17, 13px]]
                                stroke: { color: [[13, global.text_stroke], [15, [0.969,0.973,0.973]]], width: 4px }
        minor_road:
            filter: { kind: minor_road, not: { kind_detail: service } }
            draw:
                lines:
                    color: [1.00,1.00,1.00] #[[12, [0.850,0.850,0.850]], [13, [0.714,0.733,0.760]], [16, [1.00,1.00,1.00]]]
                    width: [[11, 0px], [12, 0.5px], [13, 0.5px], [14, 1px], [16, 3px], [18, 9m]]
                    outline:
                        # color: [[12, [0.900,0.900,0.900]], [13, [0.774,0.797,0.823]], [14, [0.756,0.779,0.798]]]
                        color: [[12, [0.900,0.900,0.900]], [14, [0.850,0.850,0.850]], [15, [0.756,0.779,0.798]]]
                        width: [[11, 0px], [12, 0px], [13, 0px], [14, 1px], [16, 1.5px], [17, 2px], [18, 3px]]
            early:
                filter: { $zoom: { max: 13 } }
                draw:
                    lines:
                        order: 350
                        outline:
                            order: 351
            # Example on Angle island
            # 17/37.86478/-122.43399
            # For Walkabout which is mostly walking focused these roads should always be on, including for biking.
            # For other styles (like Bubble Wrap), TBD
            # motor_vehicle_no:
            #     filter: { kind_detail: unclassified, motor_vehicle: no }
            #     draw:
            #         lines:
            #             visible: false

            # Is this junk code?
            round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: round
                        join: round
            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: global.minor_tunnel1
                        outline:
                            color: global.minor_tunnel_casing1
            minor_road_bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt
            labels-minor_road:
                filter:
                    $zoom: { min: 15 }
                draw:
                    text-blend-order:
                        priority: 59
                        visible: global.text_visible_minor_road_e
                        font:
                            fill: [[15, [0.536,0.556,0.581]], [17, [0.40,0.40,0.40]]]
                            size: [[15, 9px], [16, 12px], [17, 12px], [18, 13px]]
                            stroke: { color: [[15, global.text_stroke], [17,[0.969,0.973,0.973]]], width: 4px }
            early-residential:
                filter: { kind_detail: residential, $zoom: { max: 15 } }
                draw:
                    lines:
                        order: 350
                        outline:
                            order: 351
        service_road:
            filter: { kind: minor_road, kind_detail: service }
            draw:
                lines:
                    color: [1.00,1.00,1.00]
                    width: [[14, 1px], [16, 2px], [18, 4m]]
                    outline:
                        color: [[12, [0.900,0.900,0.900]], [14, [0.756,0.779,0.798]]]
                        width: [[13, 0px], [14, 0.5px], [16, 1px], [18, 2px]]
            early:
                filter: { $zoom: { max: 15 } }
                draw:
                    lines:
                        order: 350
                        outline:
                            order: 351
            labels-service_road:
                filter:
                    $zoom: { min: 17 }
                draw:
                    text-blend-order:
                        priority: 60
                        visible: global.text_visible_service_road
                        font:
                            fill: [0.536,0.556,0.581]
                            size: [[15, 9px], [16, 12px], [17, 12px], [18, 13px]]
                            stroke: { color: [[15, global.text_stroke], [17,[0.969,0.973,0.973]]], width: 4px }


        shields:
            filter:
                $zoom: { min: 6 }
                #
                # United State looks great with shield_text alone, but...
                #
                #shield_text: true    # some roads don't have shield text, deal with that later
                #
                # Europe doesn't have many network relations set, so we could look for either
                # shield_text or ref (with no shield_text) but...
                # that makes United States look a bit funky with `(xxx)` and generic shields
                # showing up in fields of custom state shields like US:CA and US:NY
                #
                any:
                    - shield_text: true    # some roads don't have shield text, deal with that later
                    - all:
                        - shield_text: false    # some roads don't have shield text, deal with that later
                        - ref: true
                        - kind_detail: [motorway, trunk, primary, secondary, tertiary]
            # default
            draw:
                icons:
                    # you need to match any custom shield to the vector tile `network` values
                    sprite: |
                        function() {
                            if( feature.shield_text ) {
                                return ('generic_shield-' + feature.shield_text.length + 'char');
                            } else {
                                return ('generic_shield-' + feature.ref.length + 'char');
                            }
                        }
                    sprite_default: generic_shield_5char
                    priority: 58
                    repeat_group: shields
                    repeat_distance: [[8,90px],[10,40px],[13,30px]]
                    placement: midpoint
                    placement_min_length_ratio:
                        - [8, 0.1]
                        - [9, 0.25]
                        - [10, 0.25]
                        - [11, 0.15]
                        - [12, 1]
                        - [13, 1.50]
                        - [14, 2.0]
                    cull_from_tile: true
                    visible: false
                    text:
                        offset: [0px, -0.5px]
                        repeat_distance: 200px
                        anchor: center
                        text_source: |
                            function() {
                                if( feature.shield_text ) {
                                    return feature.shield_text;
                                } else {
                                    return feature.ref;
                                }
                            }
                        font:
                            family: Montserrat
                            #fill: [0.308,0.308,0.308]
                            fill: [0.320,0.320,0.320]
                            size: [[7,7px],[12,8px],[16,11px]]

            default_priority_highway:
                filter:
                    all:
                        - kind_detail: motorway
                        - $zoom: { min: 9 }
                draw:
                    icons:
                        priority: 47
                        #color: yellow
                        visible: global.sdk_road_shields

            default_priority_trunk:
                filter:
                    all:
                        - kind_detail: [trunk]
                        - $zoom: { min: 10 }
                draw:
                    icons:
                        priority: 48
                        #color: red
                        visible: global.sdk_road_shields
            default_priority_primary:
                filter:
                    all:
                        - kind_detail: [primary]
                        - $zoom: { min: 12 }
                draw:
                    icons:
                        priority: 49
                        #color: aqua
                        visible: global.sdk_road_shields
            default_priority_trunk_secondary:
                filter:
                    all:
                        - kind_detail: [secondary]
                        - $zoom: { min: 12 }
                draw:
                    icons:
                        priority: 53
                        #color: blue
                        visible: global.sdk_road_shields
            default_priority_trunk_tertiary:
                filter:
                    all:
                        - kind_detail: tertiary
                        - $zoom: { min: 13 }
                draw:
                    icons:
                        priority: 55
                        #color: green
                        visible: global.sdk_road_shields
            # not-special:
            #     filter:
            #         not: { network: ['US:I','US:US'] }
            #         $zoom: { max: 9 }
            #     draw:
            #         icons:
            #             visible: false
            width_1char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 1)
                        } else {
                            return (feature.ref.length === 1)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[14px,14px]],[13,[16px,16px]],[16,[18px,18px]]]
            width_2char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 2)
                        } else {
                            return (feature.ref.length === 2)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[18px,14px]],[13,[20px,15px]],[16,[24px,18px]]]
            width_3char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 3)
                        } else {
                            return (feature.ref.length === 3)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[25px,14px]],[13,[27px,15px]],[16,[33px,18px]]]
            width_4char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 4)
                        } else {
                            return (feature.ref.length === 4)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[29px,14px]],[13,[31px,15px]],[16,[38px,18px]]]
                # London sucks
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        icons:
                            visible: false
            width_5char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 5)
                        } else {
                            return (feature.ref.length === 5)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[34px,14px]],[13,[37px,15px]],[16,[45px,18px]]]
                # London sucks
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        icons:
                            visible: false
            # this is kinda a hack
            width_longggggg:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length > 5)
                        } else {
                            return (feature.ref.length > 5)
                        }
                    }
                draw:
                    icons:
                        visible: false
            # missing-route-relations:
            #     filter: { shield_text: false }
            #     draw:
            #         lines:
            #             order: 1000
            #             color: red
            #             width: 2px
            #
            # Now for the good stuff
            #
            legit-shields:
                filter: { shield_text: true }
                # draw:
                #     icons:
                #         color: red
                # US Interstate roads
                US-I:
                    filter:
                        network: 'US:I'
                    draw:
                        icons:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: function() { return (feature.network + '-' + feature.shield_text.length + 'char'); }
                            priority: 46
                            visible: global.sdk_road_shields
                            text:
                                offset: [0px, 0.5px]
                                font:
                                    fill: [1.0,1.0,1.0]
                                    size: [[7,8px],[13,9px],[15,11px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[15px,18px]],[13,[17px,20px]],[15,[22px,25px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[18px,18px]],[13,[20px,20px]],[15,[25px,25px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[23px,18px]],[13,[26px,20px]],[15,[33px,25px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[25px,18px]],[13,[27px,20px]],[15,[35px,25px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[26px,18px]],[13,[30px,20px]],[15,[38px,25px]]]
                # US Federal Routes
                US-US:
                    filter:
                        network: ['US:US','US:US:Business', 'US:US:Truck', 'US:US:Alternate']
                        $zoom: { min: 7 }
                    draw:
                        icons:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: |
                                function() { return ('US:US-' + feature.shield_text.length + 'char'); }
                            priority: 47
                            cull_from_tile: true
                            visible: global.sdk_road_shields
                            text:
                                offset: [0px, -0.7px]
                                font:
                                    fill: [0.0,0.0,0.0]
                                    size: [[7,8px],[13,9px],[15,11px]]
                    # early:
                    #     filter: { $zoom: [7] }
                    #     icons:
                    #         visible: false
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[15px,17px]],[13,[17px,19px]],[15,[22px,24px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[18px,17px]],[13,[20px,19px]],[15,[26px,24px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[22px,17px]],[13,[25px,19px]],[15,[34px,25px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[25px,17px]],[13,[29px,19px]],[15,[39px,25px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[27px,17px]],[13,[30px,19px]],[15,[41px,25px]]]
                # US State Routes
                # US-states:
                #     # Match state highways: `US:??`
                #     filter: |
                #         function() {
                #             return feature.shield_text &&
                #                 /^US:(?!US)\w\w$/.test(feature.network)
                #         }
                #     draw:
                #         icons:
                #             # you need to match any custom shield to the vector tile `network` values
                #             priority: 18
                #     early:
                #         filter: { $zoom: [7,8,9] }
                #         icons:
                #             visible: false
                US-CA:
                    # Match California state highways: `US:CA`
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:CA$/.test(feature.network)
                        }
                    draw:
                        icons:
                            sprite: function() { return (feature.network + '-' + feature.shield_text.length + 'char'); }
                            text:
                                offset: [0px, 1px]
                                font:
                                    fill: [1.0,1.0,1.0]
                                    size: [[7,7px],[13,9px],[15,10px]]
                    motorway:
                        filter: { kind_detail: [motorway], $zoom: [7,8] }
                        draw:
                            icons:
                                visible: global.sdk_road_shields
                    trunk:
                        filter: { kind_detail: [trunk], $zoom: [8,9] }
                        draw:
                            icons:
                                visible: global.sdk_road_shields
                    primary:
                        filter: { kind_detail: primary, $zoom: [10,11] }
                        draw:
                            icons:
                                visible: global.sdk_road_shields
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[14px,16px]],[13,[15px,18px]],[15,[18px,21px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[18px,18px]],[13,[20px,20px]],[15,[23px,23px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[21px,18px]],[13,[24px,20px]],[15,[28px,23px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[24px,18px]],[13,[26px,20px]],[15,[31px,23px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[25px,18px]],[13,[27px,20px]],[15,[32px,23px]]]
                US-NY:
                    # Match New York state highways: `US:NY`
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:NY$/.test(feature.network)
                                /* (/^US:NY$/.test(feature.network) || /^NY:US$/.test(feature.network)) */
                        }
                    draw:
                        icons:
                            sprite: |
                                function() { return ( 'US:NY-' + feature.shield_text.length + 'char'); }
                            text:
                                # offset: [0px, 1px]
                                font:
                                    fill: [0.0,0.0,0.0]
                                    size: [[7,7px],[13,9px],[15,10px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[13px,17px]],[13,[15px,19px]],[15,[18px,22px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[17px,17px]],[13,[19px,19px]],[15,[22px,22px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[20px,17px]],[13,[22px,19px]],[15,[27px,22px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[21px,17px]],[13,[24px,19px]],[15,[29px,22px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[22px,17px]],[13,[25px,19px]],[15,[30px,22px]]]
                US-PA:
                    # Match Pennsylvania state highways
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:PA$/.test(feature.network)
                        }
                    draw:
                        icons:
                            sprite: |
                                function() { return ( 'US:PA-' + feature.shield_text.length + 'char'); }
                            text:
                                offset: [0px, 1px]
                                font:
                                    fill: [0.0,0.0,0.0]
                                    size: [[7,7px],[13,9px],[15,10px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[13px,17px]],[13,[15px,19px]],[15,[18px,22px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[17px,17px]],[13,[19px,19px]],[15,[22px,22px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[21px,17px]],[13,[24px,19px]],[15,[28px,22px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[22px,17px]],[13,[25px,19px]],[15,[30x,22px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[24px,17px]],[13,[27px,19px]],[15,[32px,22px]]]
                # USA County Routes
                US-counties:
                    # Match state highways: `US:??:*`
                    #
                    # this is very USA specific
                    #
                    # filter: |
                    #     function() {
                    #         return feature.shield_text &&
                    #             /^US:(?!US)\w\w:.*$/.test(feature.network)
                    #     }
                    #
                    # this generic for any country with 3rd level networks (like county routes in USA)
                    # BEWARE:
                    # US:US:Business  about 150
                    # US:US:Truck
                    # US:US:Alternate
    #
                    # STATE ROUTE
                    # ??:??:Loop  about 200
                    # ??:??:Spur  about 200
                    # ??:??:Business   about 100
    #
                    # STATE TEXAS SPECIAL ROUTE
                    # US:TX:FM -- probably just state? there are 3k of these
                    #
                    #
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^\w+:\w+:(!Alternate).+$/.test(feature.network) &&
                                $zoom > 10
                        }
                    draw:
                        icons:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: function() { return ('county_shield-' + feature.shield_text.length + 'char'); }
                            # priority: 19
                            visible: global.sdk_road_shields
                            text:
                                font:
                                    fill: [0.320,0.320,0.320]
                                    #size: [[11,7px],[15,10px]]
                    # early:
                    #     filter: { $zoom: { max: 11 } }
                    #     draw:
                    #         icons:
                    #             visible: false
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[14px,14px]],[13,[16px,16px]],[15,[18px,18px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[16px,14px]],[13,[18px,15px]],[15,[22px,18px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[20px,14px]],[13,[21px,15px]],[15,[26px,18px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[25px,14px]],[13,[28px,15px]],[15,[34px,18px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[30px,14px]],[13,[33px,15px]],[15,[40px,18px]]]
        path:
            filter:
                all:
                    - kind: [path, portage_way]
                not:
                    - kind_detail: [pier]
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: [1.00,1.00,1.00]
                    width: [[13, 0.65px], [14, 0.85px], [15, 1px], [17, 2.5m]]
                    outline:
                        color: [[12, [0.900,0.900,0.900]], [13, [0.774,0.797,0.823]], [14, [0.774,0.797,0.819]], [16, [0.725,0.747,0.766]]]
                        width: [[14, 0px], [15, 0.75px], [16, 1px], [17, 1px], [18, 3px]]
            paths:
                filter:
                    any:
                        - kind_detail: path
                        - all:
                            - kind_detail: track
                            - motor_vehicle: no
                draw:
                    lines:
                        visible: true

                labels-path:
                    draw:
                        text-blend-order:
                            priority: 58
                            visible: global.text_visible_path
                            font:
                                fill: [0.536,0.556,0.581]
                                size: [[15, 9px], [18, 13px]]
                                stroke: { color: [[15, global.text_stroke], [17,[0.969,0.973,0.973]]], width: [[15, 2px], [17, 4px]] }


            footway:
                filter: { kind_detail: [footway] }
                draw:
                    lines:
                        # footway is narrower than default
                        width: [[13, 0.35px], [14, 0.5px], [15, 1px], [17, 2.5m]]
                        outline:
                            # casing for footway starts at  z16
                            width: [[14, 0px], [15, 0px], [16, 1px], [17, 1px], [18, 3px]]

                sidewalk-crossing:
                    filter: { footway: [sidewalk, crossing], not: { walking_network: true }, $zoom: { max: 19 } }
                    draw:
                        lines:
                            outline:
                                color: [0.816,0.840,0.861]

                labels-footpaths:
                    filter: { $zoom: { min: 11 } }
                    draw:
                        text-blend-order:
                            priority: 58
                            visible: global.text_visible_path
                            font:
                                fill: [0.536,0.556,0.581]
                                size: [[15, 9px], [18, 13px]]
                                stroke: { color: [[15, global.text_stroke], [17,[0.969,0.973,0.973]]], width: [[15, 2px], [17, 4px]] }


            pedestrian:
                filter:
                    kind_detail: [cycleway, pedestrian]
                    not: { kind_detail: [pedestrian], walking_network: true }
                draw:
                    lines:
                        visible: true

                labels-pedestrian:
                    filter: { $zoom: { min: 11 } }
                    draw:
                        text-blend-order:
                            priority: 58
                            visible: global.text_visible_path
                            font:
                                fill: [0.536,0.556,0.581]
                                size: [[15, 9px], [18, 13px]]
                                stroke: { color: [[15, global.text_stroke], [17,[0.969,0.973,0.973]]], width: [[15, 2px], [17, 4px]] }

        track:
            filter:
                kind: path
                kind_detail: [track]
                any:
                    motor_vehicle: [false, no]
                    is_bicycle_related: true
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: [1.00,1.00,1.00]
                    width: [[13, 0.65px], [14, 0.85px], [15, 1px], [17, 2.5m]]
                    outline:
                        color: [[12, [0.900,0.900,0.900]], [13, [0.774,0.797,0.823]], [14, [0.774,0.797,0.819]], [16, [0.725,0.747,0.766]]]
                        width: [[14, 0px], [15, 0.75px], [16, 1px], [17, 1px], [18, 3px]]
            labels-track:
                draw:
                    text-blend-order:
                        priority: 58
                        visible: global.text_visible_path
                        font:
                            fill: [0.536,0.556,0.581]
                            size: [[15, 9px], [18, 13px]]
                            stroke: { color: [[15, global.text_stroke], [17,[0.969,0.973,0.973]]], width: [[15, 2px], [17, 4px]] }

        steps:
            filter:
                all:
                    - kind: path
                    - kind_detail: steps
            draw:
                dashed_steps:
                    #order: function() { return feature.sort_rank; }
                    order: 1005
                    color: [1.00,1.00,1.00]
                    width: [[15, 0.6], [16, 1px], [17, 2.5m]]
            labels-steps:
                filter: { $zoom: { min: 17 } }
                draw:
                    text-blend-order:
                        priority: 63
                        visible: global.text_visible_steps
                        font:
                            fill: [0.45,0.45,0.45]
                            size: 11px
                            stroke: { color: global.text_stroke, width: 4 }

        other-roads-no-motorvehicle-overlay:
            filter:
                not: { kind: [path,ferry] }
                motor_vehicle: no
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: [1.00,1.00,1.00]
                    width: [[13, 0.65px], [14, 0.85px], [15, 1px], [17, 2.5m]]
                    outline:
                        color: [[12, [0.900,0.900,0.900]], [13, [0.774,0.797,0.823]], [14, [0.774,0.797,0.819]], [16, [0.725,0.747,0.766]]]
                        width: [[14, 0px], [15, 0.75px], [16, 1px], [17, 1px], [18, 3px]]
            labels-track:
                draw:
                    text-blend-order:
                        priority: 58
                        visible: global.text_visible_path
                        font:
                            fill: [0.536,0.556,0.581]
                            size: [[15, 9px], [18, 13px]]
                            stroke: { color: [[15, global.text_stroke], [17,[0.969,0.973,0.973]]], width: [[15, 2px], [17, 4px]] }

        other-roads-walking-network-only:
            filter:
                all:
                - walking_network: true
                - not:
                    any:
                        - { kind: [path,ferry], not: { kind_detail: pedestrian } }
                        - kind_detail: [track]
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: [1.00,1.00,1.00]
                    width: [[13, 0.65px], [14, 0.85px], [15, 1px], [17, 2.5m]]
                    outline:
                        color: [[12, [0.900,0.900,0.900]], [13, [0.774,0.797,0.823]], [14, [0.774,0.797,0.819]], [16, [0.725,0.747,0.766]]]
                        width: [[14, 0px], [15, 0.75px], [16, 1px], [17, 1px], [18, 3px]]

        winter_sport_pistes:
            filter: { kind: piste }
            draw:
                lines:
                    order: 388   # We override the server value here because Eraser Map is also a special Ski Map
                    cap: round
                    join: round
                    color: '#909090'
                    width: [[13,0px],[14,1px],[15, 1.25px], [16, 2px], [18, 3m]]
                text-blend-order:
                    priority: 18
                    visible: global.text_visible_piste
                    font:
                        fill: global.text_fill_piste
                        size: 12px
                        stroke: { color: [0.913,0.925,0.933], width: 4 }
            early:
                filter: { $zoom: { max: 15 } }
                draw:
                    text-blend-order:
                        visible: false
            early-z15:
                filter: { $zoom: [15] }
                draw:
                    text-blend-order:
                        font:
                            fill: global.text_fill_piste_e
                            size: 11px
            easy:
                filter: { piste_difficulty: easy }
                draw:
                    lines:
                        color: [0.367,0.750,0.622]
            intermediate:
                filter: { piste_difficulty: intermediate }
                draw:
                    lines:
                        color: [0.420,0.678,0.863]
            advanced:
                filter: { piste_difficulty: advanced }
                draw:
                    lines:
                        color: [0.450,0.450,0.450]
                    text-blend-order:
                        text_source: global.ux_language_text_source_piste_advanced
            expert:
                filter: { piste_difficulty: expert }
                draw:
                    lines:
                        color: [0.450,0.450,0.450]
                    text-blend-order:
                        text_source: global.ux_language_text_source_piste_expert
        pier:
            filter: { kind: path, kind_detail: pier }
            draw:
                lines:
                    color: [0.993,0.993,0.993]
                    width: [[13, 0px], [14, 0.5px],[15, 1.5px], [16, 2.5px],[17, 3px],[18, 3m]]
                    outline:
                        color: [0.431,0.806,0.914]
                        width: [[15, 0px],[16,0.65px], [17, 0.75px], [18, 1px], [19, 1.5px]]
        racetrack:
            filter: { kind: racetrack }
            draw:
                lines:
                    cap: round
                    join: round
                    color: [0.400,0.666,0.690]
                    width: [[13,0.5px],[14,1px],[15, 1px], [16, 1.5px], [18, 3px], [19, 5px]]
        airport-lines:
            filter: { kind: aeroway, kind_detail: [runway,taxiway] }
            draw:
                lines:
                    color: [[11,[0.25,0.25,0.25]],[17,[0.00,0.00,0.00]]]
                    cap: butt
                    width: [[10,1px],[13,3px],[15,16px],[17,60m]]
                    outline:
                        color: [1.0,1.0,1.0]
            # Features come in at zoom 9, but include mostly minor airports without POIs until z13
            early:
                filter: { $zoom: { max: 12 }, not: { landuse_kind: [aerodrome, runway, taxiway] } }
                draw:
                    lines:
                        visible: false
            not-round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: butt
            taxiway:
                filter: { kind_detail: taxiway }
                draw:
                    lines:
                        color: [[11,[0.885,0.885,0.885]],[13,[0.779,0.802,0.828]],[14,[0.779,0.802,0.828]],[15,[1.0,1.0,1.0]]]
                        width: [[11,0.5px],[14,1px],[15,0px],[16,1px],[17,6px],[18,9m]]
                        outline:
                            color: [[11,[0.894,0.906,0.914]],[14,[0.779,0.802,0.828]],[15,[0.714,0.733,0.760]],[17,[0.744,0.764,0.792]]]
                            width: [[11, 0px],[14,0px],[15,0.75px],[17,2px],[18,3px]]
                early:
                    filter: { $zoom: { max: 13 } }
                    draw:
                        lines:
                            visible: false
            runway:
                filter: { kind_detail: runway }
                draw:
                    lines:
                        color: [[11, [0.885,0.885,0.885]], [13, [0.714,0.733,0.760]], [15, [1.0,1.0,1.0]], [16, [1.0,1.0,1.0]]]
                        outline:
                            color: [[11, [0.894,0.906,0.914]], [14,[0.779,0.802,0.828]], [15, [0.714,0.733,0.760]], [16, [0.714,0.733,0.760]], [17, [0.744,0.764,0.792]]]
                            width: [[11, 0px], [14, 0px], [15, 0.75px], [16, 1.5px], [17, 2px], [18, 3px]]
        ferry:
            filter: { kind: ferry }
            draw:
                lines:
                    color: [0.451,0.804,0.878]
                    width: [[12, 0.5px], [13, 0.75px], [15, 1.0px]]
        aerialway:
            filter: { kind: aerialway }
            draw:
                lines:
                    color: [0.5,0.5,0.5]
                    width: [[14, 0.5px], [15, 1.0px], [16, 2m]]
            gondola_cable_car:
                filter: { kind_detail: [gondola, cable_car] }
                draw:
                    lines:
                        color: [0.45,0.45,0.45]
                        width: [[12, 0.5px], [13, 0.5px], [14, 1.75px], [15, 2.5px], [16, 2.5px], [18, 3m]]
#                    lines_transparent:
#                        color: [0.5,0.5,0.5]
#                        width: [[12, 0px], [13, 5px], [14, 8px], [15, 10px], [16, 12px]]
            chair_lift:
                filter: { kind_detail: chair_lift }
                draw:
                    lines:
                        color: [0.45,0.45,0.45]
                        width: [[12, 0.5px], [13, 0.5px], [14, 1.75px], [15, 2.5px], [16, 2.5px], [18, 3m]]
#                    lines_transparent:
#                        color: [0.5,0.5,0.5]
#                        width: [[12, 0px], [13, 5px], [14, 8px], [15, 10px], [16, 12px], [18, 20px]]
            aerialway-labels:
                filter: { $zoom: { min: 14 } }
                draw:
                    text-blend-order:
                        priority: 63
                        visible: global.text_visible_aerialway
                        text_source: global.ux_language_text_source
                        font:
                            fill: global.text_fill
                            size: 10px
                            stroke: { color: global.text_stroke_park, width: 4 }
                minor:
                    filter: { not: { kind_detail: [gondola,cable_car,chair_lift] }, $zoom: { max: 17 } }
                    draw:
                        text-blend-order:
                            visible: false
                early_gondola:
                    filter: { $zoom: [14], kind_detail: [gondola,cable_car] }
                    draw:
                        text-blend-order:
                            font:
                                weight: 600
                later:
                    filter: { $zoom: { min: 15 } }
                    draw:
                        text-blend-order:
                            font:
                                weight: 600
        rail:
            filter: { kind: rail, not: { railway: [subway,light_rail,tram] } }
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: [0.588,0.671,0.698]
                    width: [[12,0px],[13,0.25px],[14,0.4px],[15,0.75px],[16,0.75px],[18,1m]]
            service:
                filter: { service: true }
                draw:
                    lines:
                        color: [[14,[0.653,0.758,0.786]], [17,[0.670,0.777,0.807]]]
                        width: [[14,0px],[15,0.3px],[16,0.5px],[18,0.75px],[19,0.5m]]
            z-order:
                #filter: { $zoom: {min: 12} }
                draw:
                    lines:
                        # let roads sort themselves past zoom 14
                        order: function() { return feature.sort_rank; }
                        # but give them all the same outline
                        outline:
                            order: 354

                bridges-tunnels:
                    filter: { any: [is_bridge: true, is_tunnel: true] }
                    draw:
                        lines:
                            outline:
                                # except bridges and tunnels, their outlines should also self-sort
                                order: function() { return feature.sort_rank || 305; }

    buildings:
        data: { source: mapzen, layer: buildings }
        filter:
            not: { location: underground, layer: -1 }
        # set default footprint and extrusion draw properties, but don't draw by default (rules below will turn visibility on)
        draw:
            polygons:
                visible: false
                order: 329
                color: [[14,[0.930,0.940,0.940]],[15,[0.920,0.930,0.930]],[16,[0.930,0.940,0.940]]]
            lines:
                style: lines
                order: 330
                visible: false
                color: [[14,[0.750,0.750,0.750]],[17,[0.85, 0.85, 0.85]]]
                width: [[14, 0px], [15, 0.5px], [16,0.5px], [17,1px], [18, 1.25px]]

        # building footprints, pre-extrusion
        footprints:
            filter:
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: [13], scale_rank: [1,2] }
                    - { $zoom: [14], scale_rank: [1,2,3] }
                    - { $zoom: [15], area: { min: 5000 }, name: true }
                    - { $zoom: [15], area: { min: 5000 }, kind: true }
                    - { $zoom: [15], area: { min: 3000 }, landuse_kind: true }
                    - { $zoom: [15], height: { min: 100 } }
                    - { $zoom: [15], volume: { min: 100000 } }
                    - { $zoom: [16], area: { min: 1000 }, name: true }
                    - { $zoom: [16], area: { min: 1000 }, kind: true }
                    - { $zoom: [16], area: { min: 2000 }, landuse_kind: true }
                    - { $zoom: [16], volume: { min: 50000 } }
                    #- { $zoom: [16], height: { min: 50 } }
                    - { $zoom: { min: 17 } }
                all:
                   - not: { location: underground }
            draw:
                polygons:
                    visible: true
                lines:
                    visible: true

            extrude:
                filter:
                    all:
                        - function() { return global.sdk_building_extrude; }
                        - any:
                            # for the buildings that were visible at zoom 15, extrude those all up a bit at z17
                            - { $zoom: [16], area: { min: 20000 }, name: true }
                            - { $zoom: [16], area: { min: 20000 }, kind: true }
                            - { $zoom: [16], area: { min: 5000 }, landuse_kind: true }
                            - { $zoom: [16], height: { min: 150 } }
                            - { $zoom: [16], volume: { min: 150000 } }
                            - { $zoom: [17], area: { min: 5000 }, name: true }
                            - { $zoom: [17], area: { min: 5000 }, kind: true }
                            - { $zoom: [17], area: { min: 3000 }, landuse_kind: true }
                            - { $zoom: [17], height: { min: 100 } }
                            - { $zoom: [17], volume: { min: 100000 } }
                            - { $zoom: { min: 18 } }
                draw:
                    polygons:
                        visible: true
                        order: 438
                        style: building-grid
                        extrude: 100
                        color: [0.930,0.940,0.940]
                    lines:
                        visible: true
                        order: 439
                        style: building-lines
                        extrude: 100
                z16-default:
                    filter: { $zoom: [16] }
                    draw:
                        polygons:
                            extrude: 20
                        lines:
                            extrude: 20
                z18-default:
                    filter: { $zoom: { min: 18 } }
                    draw:
                        polygons:
                            extrude: 20
                        lines:
                            extrude: 20
                z18-special:
                    filter:
                        any:
                            - { $zoom: { min: 18 }, area: { min: 5000 }, name: true }
                            - { $zoom: { min: 18 }, area: { min: 5000 }, kind: true }
                            - { $zoom: { min: 18 }, area: { min: 3000 }, landuse_kind: true }
                            - { $zoom: { min: 18 }, height: { min: 100 } }
                            - { $zoom: { min: 18 }, volume: { min: 100000 } }
                    draw:
                        polygons:
                            extrude: 100
                        lines:
                            extrude: 100

        transit-overlay-station-buildings:
            filter:
                all:
                    - landuse_kind: [station]
                    - function() { return global.sdk_transit_overlay; }
            draw:
                polygons:
                    color: '#bdadbf'
                    order: 500
                    #extrude: function() { return feature.height || 20; }
                outline:
                    style: lines
                    order: 501
                    color: '#d534df'
                    width: [[14,0.1px],[15,0.5px],[17,0.5px],[18,0.75px],[19,0.25m]]
                    #extrude: function() { return feature.height || 20; }

        buildings-labels:
            filter:
                all:
                    - { $zoom: { min: 17 } }
                    - $geometry: point
                    - not: { location: underground, kind: address }
                    - name: true
                    - function() { return global.text_visible_building; }
                any:
                    - { $zoom: [16], area: { min: 5000 } }
                    - { $zoom: [16], area: { min: 5000 } }
                    - { $zoom: [16], area: { min: 10000 }, landuse_kind: true }
                    - { $zoom: [16], area: { min: 7000 }, kind_detail: [university, college, school, kindergarten] }
                    - { $zoom: [16], volume: { min: 50000 }, name: true }
                    - { $zoom: [17], area: { min: 3000 } }
                    - { $zoom: [17], area: { min: 2000 }, kind_detail: [university, college, school, kindergarten] }
                    - { $zoom: [18], area: { min: 1000 } }
                    - { $zoom: [18], kind_detail: [university, college, school, kindergarten] }
                    - { $zoom: [19], area: { min: 200 } }
                    - { $zoom: { min: 19 }, kind_detail: [university, college, school, kindergarten] }
                    - { $zoom: { min: 20 }, area: true }
            draw:
                text-blend-order:
                    text_source: global.ux_language_text_source
                    #interactive: global.sdk_interactive
                    move_into_tile: true
                    priority: 70
                    order: 7
                    font:
                        fill: '#666'
                        family: global.text_font_family
                        style: italic
                        size: 11px
                        stroke: { color: global.text_stroke_address, width: 1 }
            building_labels-z15-z16-z17:
                filter: { $zoom: [15,16,17] }
                draw: { text-blend-order: { font: { size: 12px, stroke: { width: 2 } } } }
            building_labels-z18:
                filter: { $zoom: [18,19] }
                draw: { text-blend-order: { font: { size: 12px, weight: 600, stroke: { width: 3 } } } }
            building_labels-z20-up:
                filter: { $zoom: { min: 20 } }
                draw: { text-blend-order: { font: { size: 14px, weight: 600, stroke: { width: 3 }  } } }
            building-labels-z16:
                filter: function() { if( $zoom == 16 && feature.name.length > 20 ) { return true; } else { return false; } }
                draw:
                    text-blend-order:
                        visible: false
            building-labels-z17:
                filter: function() { if( $zoom == 17 && feature.name.length > 30 ) { return true; } else { return false; } }
                draw:
                    text-blend-order:
                        visible: false
            building-labels-z20+:
                filter: { $zoom: { min: 20 } }
                draw:
                    text-blend-order:
                        text_source: global.ux_language_text_source_building_and_address
        address-labels:
            filter:
                all:
                    - $zoom: { min: 20 }
                    - function() { return global.text_visible_address; }
                any:
                    - kind: address
                    - { label_position: true, addr_housenumber: true, name: false }
            draw:
                text-blend-order:
                    #interactive: global.sdk_interactive
                    order: 7
                    text_source: addr_housenumber
                    font:
                        fill: global.text_fill_address
                        family: global.text_font_family
                        style: italic
                        size: 10px
                        stroke: { color: global.text_stroke_address, width: 4 }

    boundaries:
        data: { source: mapzen, layer: boundaries }
        draw:
            lines:
                order: function() { return (feature.sort_rank + 100); }
        country:
            filter:
                - kind: country
                - admin_level: 2
            draw:
                lines:
                    color: global.country_boundary
                    width: [[1, 0.5px], [2, 1.0px], [4, 1.5px], [9, 2.5px], [14, 3.5px], [16, 4.5px], [17, 14m]]
            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        visible: false
            labels-z9-up:
                filter: { name: true, $zoom: { min: 9 }, not: { maritime_boundary: true } }
                draw:
                    text-blend-order:
                        priority: 2
                        visible: global.text_visible_admin
                        text_source: global.ux_language_text_source_boundary_lines
                        text_wrap: 100
                        font:
                            family: global.text_font_family
                            size: 9px
                            fill: [0.00,0.00,0.00]
                            transform: uppercase

        other_country_boundary_disputed_etc:
            filter: { kind: [disputed, indefinite, indeterminate, lease_limit, line_of_control, overlay_limit] }
            draw:
                dashed:
                    order: function() { return (feature.sort_rank + 100); }
                    color: global.country_boundary
                    width: [[1,0.2px],[9,1.5px],[17,10m]]
            disputed:
                filter: { kind: [disputed, line_of_control] }
                draw:
                    dashed:
                        visible: false
                    dashed_big:
                        order: function() { return (feature.sort_rank + 100); }
                        color: global.country_boundary
                        width: [[1,0.5px],[9,2.5px],[17,14m]]

        region:
            filter:
                - kind: [region,macroregion]
                - kind_detail: [3,4]
            draw:
                lines:
                    color: global.region_boundary
                    width: [[0, 0.5px], [2, 1.0px], [5, 1.25px], [6, 1.5px], [7, 1.75px], [9, 2.0px], [14, 4.0px], [16, 5.0px], [17, 10m]]
            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        visible: false
            early:
                filter: { not: { min_zoom: [1,2] }, $zoom: { max: 8 } }
                draw:
                    lines:
                        visible: false
            labels-z9-up:
                filter: { name: true, $zoom: { min: 9 }, not: { maritime_boundary: true } }
                draw:
                    text-blend-order:
                        priority: 3
                        visible: global.text_visible_admin
                        text_source: global.ux_language_text_source_boundary_lines
                        text_wrap: 100
                        #offset: [0px, -7px]
                        anchor: top
                        font:
                            family: global.text_font_family
                            size: 9px
                            fill: [0.35,0.35,0.35]
                            transform: uppercase

    places:
        data: { source: mapzen, layer: places }
        filter:
            name: true
        draw:
            icons:
                text:
                    text_source: global.ux_language_text_source
                    visible: false
                    buffer: 3px
                    font:
                        family: global.text_font_family
                        fill: global.text_fill
            # NOTE: This is a hack for localities because of an icon & text bug, see note below
            text-blend-order:
                text_source: global.ux_language_text_source
                visible: false    # labels are enabled by each layer below
                buffer: 3px
                font:
                    family: global.text_font_family
                    fill: global.text_fill
            # END NOTE

        country:
            filter:
                kind: country
                $zoom: { min: 2, max: 9 }
            draw:
                text-blend-order:
                    priority: 3
                    visible: global.text_visible_admin
                    font:
                        fill: global.text_fill
                        weight: 600
                        stroke: { color: global.text_stroke, width: 4 }
            country-z2-3:
                filter:
                    $zoom: [2,3]
                draw:
                    text-blend-order:
                        priority: 10
                        font:
                            buffer: 10px
                            weight: 200
                            size: 11px
                early-ones-z2:
                    filter:
                        $zoom: [2]
                        not: { name: [United States of America,Brasil,中华人民共和国,Россия,Canada,Kalaallit Nunaat,Ísland,Australia,India,日本,Guam,Indonesia,South Africa,مصر,Nigeria,Kenya] }
                    draw:
                        text-blend-order:
                            visible: false
                early-ones-z3:
                    filter:
                        $zoom: [3]
                        name: [Nederland,Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,Crna Gora,Македонија,The Gambia,Burundi,Swaziland,الإمارات العربية المتحدة,العراق,Singapore,El Salvador,Belize,Trinidad and Tobago, Saint Lucia, Montserrat,Anguilla,República Dominicana,Bahamas,British Virgin Islands,Antigua and Barbuda,Grenada,Sint Maarten,Saint Kitts and Nevis,Cayman Islands,België - Belgique - Belgien,Deutschland,España]
                    draw:
                        text-blend-order:
                            visible: false
            country-z4:
                filter:
                    $zoom: [4]
                draw:
                    text-blend-order:
                        buffer: 10px
                        priority: 8
                        font:
                            weight: 200
                            size: 13px
                early-ones-z4:
                    filter:
                        name: [Nederland,Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,Crna Gora,Македонија,The Gambia,Burundi,Swaziland,الإمارات العربية المتحدة,العراق,Singapore,El Salvador,Belize,Trinidad and Tobago, Saint Lucia, Montserrat,Anguilla,República Dominicana,Bahamas,British Virgin Islands,Antigua and Barbuda,Grenada,Sint Maarten,Saint Kitts and Nevis,Cayman Islands,België - Belgique - Belgien,Deutschland,España,Magyarország,Österreich,Polska,Хуссар Ирыстон,Аҧсны - Абхазия]
                    draw:
                        text-blend-order:
                            visible: false
            country-z5:
                filter:
                    $zoom: [5]
                draw:
                    text-blend-order:
                        priority: 8
                        font:
                            size: 13px
                early-ones-z5:
                    filter:
                        # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                        - name: [Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,El Salvador,Belize,België - Belgique - Belgien,"Хуссар Ирыстон - Южная Осетия","Хуссар Ирыстон","Аҧсны - Абхазия","Լեռնային Ղարաբաղի Հանրապետությու (Nagorno-Karabakh Republic)"]
                        - population: { max: 5000000 }
                    draw:
                        text-blend-order:
                            visible: false
            country-z6:
                filter:
                    $zoom: [6]
                draw:
                    text-blend-order:
                        priority: 8
                        font:
                            size: 14px
                small-ones-z6:
                    filter:
                        # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                        - name: [Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,België - Belgique - Belgien,"Хуссар Ирыстон - Южная Осетия","Хуссар Ирыстон","Аҧсны - Абхазия","Լեռնային Ղարաբաղի Հանրապետությու (Nagorno-Karabakh Republic)"]
                        - population: { max: 5000000 }
                    draw:
                        text-blend-order:
                            visible: false
            country-z7:
                # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                filter: { $zoom: { min: 7, max: 9 } }
                draw:
                    text-blend-order:
                        font:
                            size: 16px
                small-ones-z7:
                    filter:
                        $zoom: [7]
                        # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                        name: [Liechtenstein,San Marino,Civitatis Vaticanæ,"Хуссар Ирыстон - Южная Осетия","Хуссар Ирыстон","Аҧсны - Абхазия","Լեռնային Ղարաբաղի Հանրապետությու (Nagorno-Karabakh Republic)"]
                    draw:
                        text-blend-order:
                            visible: false
                small-pop:
                    filter:
                        - population: { max: 5000000 }
                    draw:
                        text-blend-order:
                            priority: 30
                            font:
                                size: 12px

        region:
            filter:
                kind: region
                $zoom: { min: 4, max: 9 }
            draw:
                text-blend-order:
                    priority: 14
                    visible: false
                    font:
                        size: 11px
                        weight: normal
                        fill: [0.5,0.5,0.5,0.5]
            region-z4:
                filter:
                    $zoom: [4]
                    not: { name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen] }
                draw:
                    text-blend-order:
                        visible: global.text_visible_admin
                        text_source: global.ux_language_text_source_short
                        font:
                            fill: [0.70,0.70,0.70]
                            stroke: { color: global.text_stroke, width: 4 }
            region-z5:
                filter:
                    $zoom: [5]
                    not: { name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen] }
                draw:
                    text-blend-order:
                        visible: global.text_visible_admin
                        text_source: global.ux_language_text_source_short
                        font:
                            size: 18px
                            weight: 200
                            stroke: { color: global.text_stroke, width: 4 }
            region-z6:
                filter:
                    $zoom: [6]
                    not: { name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen] }
                draw:
                    text-blend-order:
                        visible: global.text_visible_admin
                        text_source: global.ux_language_text_source_short
                        font:
                            size: 21px
                            weight: 200
                            transform: uppercase

            region-z7-z8:
                filter: { $zoom: [7,8] }
                draw:
                    text-blend-order:
                        visible: global.text_visible_admin
                        text_source: global.ux_language_text_source_short_proxy_name
                        font:
                            size: 30px
                            weight: 200
                            transform: uppercase
                pesky:
                    filter:
                        $zoom: [7]
                        name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen]
                    draw:
                        text-blend-order:
                            visible: false

                abbrev-small-ones-z7:
                    filter:
                        $zoom: [7]
                        name: [Delaware,New Jersey,Connecticut,Rhode Island,Massachusetts,New Hampshire,Vermont]
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source_abbreviation
                            font: { transform: uppercase }
                region-z8:
                    filter:
                        $zoom: [8]
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source
                    no-pop:
                        filter:
                            any:
                                - population: false
                                - population: { max: 1000000 }
                        draw:
                            text-blend-order:
                                font:
                                    size: 16px


        populated-places:
            filter:
                kind: locality
            draw:
                icons:
                    visible: global.icon_visible_populated_places
                    size: [[10,4px],[11,0px]]
                    sprite: townspot-xs-rev
                    buffer: 8px
                    priority: 30
                    text:
                        visible: global.text_visible_populated_places
                        buffer: 3px
                        font:
                            size: [[5,9px],[8,10px],[12,11px]]
                            stroke: { color: global.text_stroke, width: 4 }
                text-blend-order:
                    visible: global.text_visible_populated_places
                    buffer: 10px
                    font:
                        size: [[5,9px],[8,10px],[12,11px]]
                        stroke: { color: global.text_stroke, width: 4 }

            #
            # NOTE: you'd think no-townspot would be the way to go, but icons with size 0px seems to have a bug to also hide the text :(
            #
            # no-townspot:
            #     filter: { $zoom: { min: 11 } }
            #     draw:
            #         icons:
            #             size: 0px
            #             text:
            #                 anchor: center
            #
            # NOTE: So instead we play a shell game with symbolizers per zoom
            #
            _icons_later:
                filter: { $zoom: { min: 11 } }
                draw:
                    icons:
                        visible: false
                    text-blend-order:
                        visible: global.text_visible_populated_places

            _text_early:
                filter: { $zoom: { max: 11 } }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            z8-50k-below:
                filter: { $zoom: [8,9], population: { min: 10000, max: 50000 } }
                draw:
                    icons:
                        buffer: 25px
                        #color: red
                        #visible: false
            z9-10k-below:
                filter: { $zoom: [8,9], population: { max: 10000 } }
                draw:
                    icons:
                        buffer: 18px
                        #color: blue
                        #visible: false
            z9-no-population:
                filter: { $zoom: [8,9], population: false }
                draw:
                    icons:
                        buffer: 10px
                        #color: yellow
                        #visible: false

            sorry-denver:
                filter:
                    $zoom: [3]
                    name: [Denver]
                draw:
                    icons:
                        visible: false

            # HACK
            # NOTE: These should use icon: buffer instead of going visible: false, but there are problems using icon here :(
            # This fixes Paris area, but causes problems for small places in the USA eg Table Bluff near Eureka, California.
            funky-village:
                filter: { $zoom: [11], population: { max: 1000 }, kind_detail: [village] }
                draw:
                    text-blend-order:
                        visible: false
            funky-isolated_dwelling:
                filter: { $zoom: [13], kind_detail: [isolated_dwelling] }
                draw:
                    text-blend-order:
                        visible: false
            hamlet:
                filter: { $zoom: [13], kind_detail: hamlet }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            # someone in London and Salt Lake City thought neighbourhoods should be tagged place: locality
            # They were wrong
            funky-fake-neighbourhoods:
                filter: { $zoom: { min: 13 }, kind_detail: [locality] }
                draw:
                    text-blend-order:
                        visible: false


            population-10m-up:
                filter:
                    population: { min: 10000000 }
                draw:
                    icons:
                        size: [[4,5px],[8,6px],[9,0px]]
                        sprite: townspot-m-rev
                        priority: 6
                        text:
                            font:
                                size: [[2,11px],[6,17px],[8,19px],[12,21px],[13,0px]]
                    text-blend-order:
                        priority: 6
                        font:
                            size: [[2,11px],[6,17px],[8,19px],[12,21px],[13,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,8px],[11,0px]]
                            sprite: capital-l
                            priority: 5
                        text-blend-order:
                            priority: 5
            population-5m-10m:
                filter:
                    population: { min: 5000000, max: 10000000 }
                draw:
                    icons:
                        size: [[4,5px],[8,6px],[9,0px]]
                        sprite: townspot-m-rev
                        priority: 7
                        text:
                            font:
                                size: [[4,10px],[6,16px],[8,18px],[12,20px],[13,0px]]
                    text-blend-order:
                        priority: 7
                        font:
                            size: [[4,10px],[6,16px],[8,18px],[12,20px],[13,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,8px],[11,0px]]
                            sprite: capital-l
                            priority: 6
                        text-blend-order:
                            priority: 6
            population-1m-5m:
                filter:
                    population: { min: 1000000, max: 5000000 }
                draw:
                    icons:
                        size: [[4,5px],[8,6px],[9,0px]]
                        sprite: townspot-m-rev
                        priority: 9
                        text:
                            font:
                                size: [[4,10px],[6,16px],[8,18px],[12,20px],[13,0px]]
                    text-blend-order:
                        priority: 9
                        font:
                            size: [[4,10px],[6,16px],[8,18px],[12,20px],[13,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,8px],[11,0px]]
                            sprite: capital-l
                            priority: 8
                        text-blend-order:
                            priority: 8
            population-500k-1m:
                filter:
                    population: { min: 500000, max: 1000000 }
                draw:
                    icons:
                        size: [[8,6px],[9,0px]]
                        sprite: townspot-m-rev
                        priority: 11
                        text:
                            font:
                                size: [[5,10px],[8,12px],[10,14px],[12,16px],[13,0px]]
                    text-blend-order:
                        priority: 11
                        font:
                            size: [[5,10px],[8,12px],[10,14px],[12,16px],[13,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,6px],[11,0px]]
                            sprite: capital-m
                            priority: 10
                        text-blend-order:
                            priority: 10
            population-200k-500k:
                filter:
                    population: { min: 200000, max: 500000 }
                draw:
                    icons:
                        size: [[8,6px],[9,6px],[10,6px],[11,0px]]
                        sprite: townspot-m-rev
                        priority: 13
                        text:
                            font:
                                size: [[6,10px],[8,14px],[10,15px],[12,16px],[13,0px]]
                    text-blend-order:
                        priority: 13
                        font:
                            size: [[6,10px],[8,14px],[10,15px],[12,16px],[13,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,6px],[11,0px]]
                            sprite: capital-m
                            priority: 12
                        text-blend-order:
                            priority: 12
            population-100k-200k:
                filter:
                    population: { min: 100000, max: 200000 }
                draw:
                    icons:
                        size: [[8,6px],[9,6px],[10,6px],[11,0px]]
                        sprite: townspot-m-rev
                        priority: 15
                        text:
                            font:
                                size: [[6,10px],[8,12px],[14,14px],[15,0px]]
                    text-blend-order:
                        priority: 15
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,6px],[11,0px]]
                            sprite: capital-m
                            priority: 14
                        text-blend-order:
                            priority: 14
            population-50k-100k:
                filter:
                    population: { min: 50000, max: 100000 }
                draw:
                    icons:
                        size: [[8,5px],[9,5px],[10,6px],[11,0px]]
                        sprite: townspot-s-rev
                        priority: 17
                        text:
                            font:
                                size: [[6,10px],[8,12px],[14,14px],[15,0px]]
                    text-blend-order:
                        priority: 17
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-m
                            priority: 16
                        text-blend-order:
                            priority: 16
            population-20k-50k:
                filter:
                    population: { min: 20000, max: 50000 }
                draw:
                    icons:
                        size: [[8,5px],[9,5px],[10,5px],[11,0px]]
                        sprite: townspot-s-rev
                        priority: 19
                        text:
                            font:
                                size: [[9,10px],[14,12px],[15,0px]]
                    text-blend-order:
                        priority: 19
                        font:
                            size: [[9,10px],[14,12px],[15,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 18
                        text-blend-order:
                            priority: 18
            population-10k-20k:
                filter:
                    population: { min: 10000, max: 20000 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs-rev
                        priority: 21
                        text:
                            font:
                                fill: [[9,[0.25,0.25,0.25]],[11,[0.00,0.00,0.00]]]
                                size: [[9,10px],[14,12px],[15,0px]]
                    text-blend-order:
                        priority: 21
                        font:
                            fill: [[9,[0.25,0.25,0.25]],[11,[0.00,0.00,0.00]]]
                            size: [[9,10px],[14,12px],[15,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 20
                        text-blend-order:
                            priority: 20
            population-5k-10k:
                filter:
                    population: { min: 5000, max: 10000 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs-rev
                        priority: 23
                        text:
                            font:
                                fill: [[9,[0.25,0.25,0.25]],[11,[0.00,0.00,0.00]]]
                                size: [[9,10px],[14,12px],[15,0px]]
                    text-blend-order:
                        priority: 23
                        font:
                            fill: [[9,[0.25,0.25,0.25]],[11,[0.00,0.00,0.00]]]
                            size: [[9,10px],[14,12px],[15,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 22
                        text-blend-order:
                            priority: 22
            population-2k-5k:
                filter:
                    population: { min: 2000, max: 5000 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs-rev
                        priority: 25
                        text:
                            font:
                                fill: [[9,[0.25,0.25,0.25]],[11,[0.00,0.00,0.00]]]
                                size: [[9,10px],[14,12px],[15,0px]]
                    text-blend-order:
                        priority: 25
                        font:
                            fill: [[9,[0.25,0.25,0.25]],[11,[0.00,0.00,0.00]]]
                            size: [[9,10px],[14,12px],[15,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 24
                        text-blend-order:
                            priority: 24
            population-1k-2k:
                filter:
                    population: { min: 1000, max: 2000 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs-rev
                        priority: 27
                        text:
                            font:
                                fill: [[9,[0.25,0.25,0.25]],[11,[0.00,0.00,0.00]]]
                                size: [[9,10px],[14,12px],[15,0px]]
                    text-blend-order:
                        priority: 27
                        font:
                            fill: [[9,[0.25,0.25,0.25]],[11,[0.00,0.00,0.00]]]
                            size: [[9,10px],[14,12px],[15,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 26
                        text-blend-order:
                            priority: 26
            population-200-1k:
                filter:
                    population: { min: 200, max: 1000 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs-rev
                        priority: 28
                        text:
                            font:
                                fill: [[9,[0.25,0.25,0.25]],[11,[0.00,0.00,0.00]]]
                                size: [[9,10px],[14,11px],[15,0px]]
                    text-blend-order:
                        priority: 28
                        font:
                            fill: [[9,[0.25,0.25,0.25]],[11,[0.00,0.00,0.00]]]
                            size: [[9,10px],[14,11px],[15,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 27
                        text-blend-order:
                            priority: 27


        neighbourhoods:
            filter:
                kind:
                    - macrohood
                    - neighbourhood
                    - borough
                $zoom: { min: 10 }
                is_landuse_aoi: false
            draw:
                text-blend-order:
                    visible: false
                    priority: 29
                    buffer: 8px
                    text_wrap: 10
                    max_lines: 2
                    font:
                        fill: [0.600,0.600,0.600]
                        weight: normal
                        transform: uppercase
                        stroke: { color: [0.894,0.906,0.914], width: 4 }
            neighborhood-z11:
                filter:
                    $zoom: [11]
                    min_zoom: [11]
                    max_zoom: { min: 12 }
                    #- kind_tile_rank: { max: 6 }
                draw:
                    text-blend-order:
                        text_wrap: 10
                        visible: global.text_visible_neighbourhoods_e
                        font:
                            size: 9px
            neighborhood-z12:
                filter:
                    $zoom: [12]
                    min_zoom: [11,12]
                    max_zoom: { min: 13 }
                    #- kind_tile_rank: { max: 8 }
                draw:
                    text-blend-order:
                        text_wrap: 10
                        visible: global.text_visible_neighbourhoods_e
                        font:
                            size: 10px
            neighborhood-z13:
                filter:
                    $zoom: [13]
                    min_zoom: [11,12,13]
                    max_zoom: { min: 14 }
                    kind_tile_rank: { max: 8 }
                draw:
                    text-blend-order:
                        text_wrap: 10
                        visible: global.text_visible_neighbourhoods_e
                        font:
                            size: 12px
                            weight: 300
                            fill: [0.620,0.620,0.620]
                            stroke: { color: [0.904,0.916,0.924], width: 4 }
            neighborhood-z14:
                filter:
                    $zoom: [14]
                    min_zoom: [11,12,13,14]
                    max_zoom: { min: 15 }
                    kind_tile_rank: { max: 8 }
                draw:
                    text-blend-order:
                        text_wrap: 12
                        visible: global.text_visible_neighbourhoods
                        font:
                            size: 16px
                            weight: 300
                            fill: [0.600,0.600,0.600]
                            stroke: { color: [0.914,0.926,0.934], width: 5 }
            neighborhood-z15:
                filter:
                    $zoom: [15]
                    min_zoom: [11,12,13,14,15]
                    max_zoom: { min: 16 }
                    kind_tile_rank: { max: 8 }
                draw:
                    text-blend-order:
                        text_wrap: 12
                        visible: global.text_visible_neighbourhoods
                        font:
                            size: 21px
                            weight: 300
                            fill: [0.650,0.650,0.650]
                            stroke: { color: [0.949,0.953,0.953], width: 6 }
                z15-new:
                    filter:
                        all:
                            - min_zoom: 15
                    draw:
                        text-blend-order:
                            priority: 19
                            font:
                                size: 13px
            neighborhood-z16:
                filter:
                    $zoom: [16]
                    min_zoom: [11,12,13,14,15,16]
                    max_zoom: { min: 17 }
                    kind_tile_rank: { max: 8 }
                draw:
                    text-blend-order:
                        visible: global.text_visible_neighbourhoods
                        font:
                            size: 24px
                            weight: 300
                            fill: [0.00,0.00,0.00,0.50]
                            stroke: { color: [0.949,0.953,0.953], width: 6 }

    pois:
        data: { source: mapzen, layer: pois }
        #visible: global.label_visible_poi_landuse
        filter:
            all:
                - not: { kind: [building,address,farm,apron,residential,commercial,industrial] }
                - $geometry: point
                # White list a few kinds to "always" show per the tile zoom inclusion, else test feature's min_zoom
                #- function() { return feature.min_zoom <= $zoom }
                - function() { if( feature.kind == 'attraction' || feature.kind == 'landmark' || feature.kind == 'hunting' || feature.kind == 'dive_centre' || feature.kind == 'gas_canister' || feature.kind == 'hunting' || feature.kind == 'fishing_area' || feature.kind == 'playground' || feature.kind == 'toilets' || feature.kind == 'drinking_water' || feature.kind == 'cycle_barrier' || feature.kind == 'bicycle_rental_station' ) { return true; } else { return feature.min_zoom <= $zoom; } }
        draw:
            icons:
                visible: global.icon_visible_poi_landuse
                size: [[13, 18px], [16, 18px], [18, 22px]]
                sprite: function() { return feature.kind; }
                sprite_default: generic
                interactive: global.sdk_interactive
                priority: 65 #function() { return (feature.min_zoom && Math.floor(feature.min_zoom * 1000)) || 65; }
                repeat_group: abc
                buffer: 7px
                text:
                    visible: global.text_visible_poi_landuse
                    text_source: global.ux_language_text_source
                    text_wrap: 18
                    max_lines: 3
                    font:
                        family: global.text_font_family
                        weight: 600
                        fill: [0.10,0.10,0.10]
                        size: [[13,10px],[14,10px],[18,11px]]
                        stroke: { color: global.text_stroke, width: 3 }
            text:
                visible: false    # labels are enabled by each layer below, and these are only for special cases like enclosures
                move_into_tile: false # preserves text alignment w/icons in JS
                interactive: global.sdk_interactive
                text_source: global.ux_language_text_source
                font:
                    family: global.text_font_family
                    weight: 600
                    fill: [0.10,0.10,0.10]
                    size: [[13,10px],[14,10px],[18,11px]]
                    stroke: { color: global.text_stroke, width: 3 }
        # improve legibility at high zooms
        poi_labels-z18:
            filter: { $zoom: { min: 18 } }
            draw:
                icons:
                    text:
                        # some pois have really long names
                        max_lines: 5

        greens-text-colours:
            filter:
                kind: [park, national_park, conservation, protected_area, nature_reserve, forest, grass, beach, battlefield]
            draw:
                icons:
                    text:
                        font:
                            fill: [0.032,0.522,0.530]
                            style: italic
                            size: [[13,11px],[14,11px],[18,12px]]

        has-name:
            filter: { name: true }

            peak:
                filter: { kind: [peak, volcano] }
                draw:
                    icons:
                        priority: 43
                low-priority-early-z11:
                    filter: { kind_tile_rank: { min: 3 }, $zoom: [11,12] }
                    draw:
                        icons:
                            visible: false
                            text: { visible: false }
                low-priority-early-z13:
                    filter: { kind_tile_rank: { min: 4 }, $zoom: [13] }
                    draw:
                        icons:
                            visible: false
                            text: { visible: false }
                peak-labels-later:
                    filter: { kind: [peak, volcano], $zoom: { min: 14 } }
                    draw:
                        icons:
                            text:
                                text_source: function() { if( feature.name && feature.elevation ) { return feature.name + "\n" + feature.elevation + "m"; } else { if( feature.name ) { return feature.name; } else { return feature.elevation; } } }
            waterfall-early:
                filter: { kind: [waterfall], $zoom: { max: 14 } }
                low-priority-early-z11:
                    filter: { kind_tile_rank: { min: 3 }, $zoom: [11,12] }
                    draw:
                        icons:
                            visible: false
                            text: { visible: false }
                low-priority-early-z13:
                    filter: { kind_tile_rank: { min: 4 }, $zoom: [13] }
                    draw:
                        icons:
                            visible: false
                            text: { visible: false }
            waterfall-labels:
                filter: { kind: [waterfall], $zoom: { min: 14 } }
                draw:
                    icons:
                        text:
                            text_source: function() { if( feature.name && feature.height ) { return feature.name + "\n" + feature.height + "m"; } else { if( feature.name ) { return feature.name; } else { return feature.height; } } }
            playgrounds_allotments_attraction_landmark_supermarket:
                filter:
                    all:
                        - kind: [playground, allotments, attraction, landmark, supermarket]
                        - area: true
                        - $geometry: point
                    any:
                        - { $zoom: [15], area: { min: 600 } }
                        - { $zoom: [16], area: { min: 300 } }
                        - { $zoom: { min: 17 }, area: true }
                draw:
                    icons:
                        priority: 41
            tourism-related:
                filter:
                    all:
                        - kind: [zoo, theme_park, resort, aquarium, winery, maze, stadium, enclosure, animal]
                        - area: true
                        - $geometry: point
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: { min: 11 }, area: { min: 400000 } }
                        - { $zoom: { min: 12 }, area: { min: 200000 } }
                        - { $zoom: { min: 13 }, area: { min: 50000 } }
                        - { $zoom: { min: 14 }, area: { min: 20000 } }
                        - { $zoom: { min: 15 }, area: { min: 2000 } }
                        - { $zoom: { min: 16 } }
                draw:
                    icons:
                        sprite: function() { return feature.kind; }
                        sprite_default: generic
                        visible: global.icon_visible_poi_landuse
                        priority: 43
                        text:
                            visible: global.text_visible_poi_landuse
                            # font:
                            #     size: 10px
                            #     stroke: { color: global.text_stroke, width: 4 }
            outdoor-needing-icons:
                filter: { kind: [bicycle_repair_station, cycle_barrier, life_ring, waste_disposal, watering_place, water_point, lifeguard_tower, power_pole, power_tower, petroleum_well, communications_tower, putin, egress, hazard, put_in_egress, rapid, beacon, cross, mineshaft, adit, water_well, saddle, dune, sinkhole, rock, stone, bicycle_junction, walking_junction, dam, boat_storage, windmill, fishing, recreation_track, horse, fire_lookout, fee_station, rest_area] }
                draw:
                    icons:
                        priority: 41
                        #sprite: generic
            outdoor-has-icons:
                filter: { kind: [outdoor, lighthouse, saddle, picnic_area, picnic_table, camp_site, ski, mine, zoo, museum, gas, gas_canister, slipway, mineshaft, adit, recreation_track, playground, allotments, attraction, landmark] }
                draw:
                    icons:
                        priority: 41
            not-outdoor-not-landuse:
                filter: { area: false, not: { kind: [park, national_park, outdoor, bicycle_repair_station, life_ring, waste_disposal, watering_place, water_point, lifeguard_tower, power_pole, power_tower, petroleum_well, bicycle_junction, walking_junction, dam, boat_storage, windmill, playground, allotments, attraction, landmark] } }
                draw:
                    icons:
                        priority: 45

        # source icon sprite from something other than kind
        sports-pitch:
            filter: { kind: [grass, pitch] }
            draw:
                icons:
                    sprite: function() { return feature.kind_detail; }
                    priority: 69
        place_of_worship:
            filter:
                kind: [place_of_worship, wayside_chapel]
            draw:
                icons:
                    sprite: function() { return feature.religion; }
                    sprite_default: place_of_worship
        # TODO: some or all of this may be unnecessary for the sprite, but is necessary for the early filter
        building-icon:
            filter:
                kind: [apartments, auditorium, building, hangar, manor, recreation_center, retirement_home, terminal]
            draw:
                icons:
                    sprite: building
            early:
                filter:
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [14], area: { max: 200000 } }
                        - { $zoom: [15], area: { max: 20000 } }
                        - { $zoom: [16], area: { max: 5000 } }
                        - { $zoom: [17], area: { max: 1000 } }
                draw:
                    icons:
                        visible: false
        #end different icon sprites
        #
        # most POI icons without name should be hidden, except these
        no-name:
            filter: { name: false }
            draw:
                icons:
                    visible: false
            # eg park polygons in SF that have area but no name, sigh
            no-name-no-area:
                filter:
                    kind: true
                    name: false
                draw:
                    icons:
                        visible: false

            # we agree with server value, always show
            # the z- in the layer name is important here
            z-always-show:
                filter:
                    kind: [bbq,firepit,fishing_area,geyser,hot_spring,observatory,picnic_site,picnic_table,playground,power_pole,power_tower,pylon,shower,slipway,swimming_area,toilets,trailhead,walking_junction,water_tower]
                draw:   { icons: { visible: global.icon_visible_poi_landuse_e } }

            # probaly difference with server, selectively show by zoom
            z15-always-show-but-server-show-later-z15-server-14:
                filter: { kind: [ranger_station, spring], $zoom: { min: 15 } }             # server says min_zoom: 14
                draw:   { icons: { visible: global.icon_visible_poi_landuse_e } }
            z17:
                filter:
                    $zoom: { min: 17 }
                    kind: [parking]
                draw: { icons: { visible: global.icon_visible_poi_landuse_e } }
            z18:
                # for different styles, different sets
                # since [picnic_site] doesn't have bubble-wrap icon, it's omitted here
                filter:
                    $zoom: { min: 18 }                                     # same as BW, server at 17 now (information is 16)
                    kind: [drinking_water, information, playground, toilets, traffic_signals, picnic_site]
                draw: { icons: { visible: global.icon_visible_poi_landuse_e } }
            z19:
                filter:
                    $zoom: { min: 19 }                                     # same as BW, server at 17 now
                    kind: [bicycle_parking, gate]
                draw: { icons: { visible: global.icon_visible_poi_landuse_e } }


            # area based show / hide
            playgrounds:
                filter:
                    all:
                        - kind: [playground, allotments, attraction, landmark]
                    any:
                        - { $zoom: [15], area: { min: 600 } }
                        - { $zoom: [16], area: { min: 300 } }
                        - { $zoom: { min: 17, area: true } }
                draw:
                    icons:
                        visible: global.icon_visible_poi_landuse_e

            # special icon and text stuff
            sports-pitch:
                filter:
                    $zoom: { min: 17 }
                    kind: [grass, pitch]
                    kind_detail: [baseball, basketball, football, hockey, soccer, tennis]
                draw:
                    icons:
                        visible: global.icon_visible_poi_landuse_e
                        priority: 69
            tree:
                filter: { kind: tree, $zoom: { min: 18 } }
                draw:
                    icons:
                        style: background-icons
                        # TODO: put tree icons behind the buildings
                        # See SF State University #20/37.72314/-122.47772
                        color: [0.145,0.745,0.643]
                        visible: global.icon_visible_poi_landuse_e
                        collide: false
                z18:
                    filter: { $zoom: [18] }
                    draw:
                        icons:
                            color: [0.459,0.765,0.722]
                            sprite: tree-s
            gate:
                filter: { kind: gate, $zoom: { min: 19 } }
                draw:
                    icons:
                        text:
                            text_source: function() { return 'gate'; }
            walking-or-bicycle_junction:
                filter: { kind: [bicycle_junction, walking_junction] }
                draw:
                    icons:
                        text:
                            text_source: ref

            z-hide-z15:
                filter:
                    $zoom: { max: 15 }
                    kind: [rest_area]
                draw: { icons: { visible: false } }

            outdoor-special-priority:
                filter: { kind: [beacon,bicycle_repair_station,boat_storage,communications_tower,cross,dam,dune,egress,fee_station,fire_lookout,hazard,horse,life_ring,lifeguard_tower,petroleum_well,power_pole,power_tower,put_in_egress,putin,rapid,rest_area,rock,saddle,silo,sinkhole,stone,walking_junction,waste_disposal,water_point,water_well,watering_place,windmill] }
                draw:
                    icons:
                        priority: 43
                        visible: global.icon_visible_poi_landuse_e
                hide-early:
                    filter: { kind: [dam,recreation_track] }
                    draw:
                        icons:
                            priority: 50
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            icons:
                                visible: false


        # NOTE: all natural_* should only be in landuse layer
        suppress-icon-always:
            filter:
                kind: [natural_forest, natural_park, natural_wood]
            draw:
                icons:
                    size: 0px
                    priority: 100
                    text:
                        font:
                            fill: '#666'
                            family: global.text_font_family
                            style: italic
                            size: 11px
            # This should work, but doesn't. hmmm
            no-area:
                filter:
                    area: false
                    $zoom: { max: 16 }
                draw:
                    icons:
                        visible: false

        # server problem: this should probably only have landuse layer label placements (not appear in pois layer)
        suppress-icon-z17:
            filter:
                $zoom: { min: 17 }
                kind: [common, grass, houseboat, pedestrian, railway, ship, wetland]
            draw:
                icons:
                    size: 0px
                    #visible: false
                    text: { font: { style: italic } }

        # the server should be setting better values here
        z-server-friend:
            hide-until-z12-any:
                filter:
                    kind: [landmark, museum, prison]
                    $zoom: { max: 12 }
                draw:
                    icons:
                        visible: false
            hide-until-z14-any:
                filter:
                    kind: [natural_forest, natural_park, natural_wood]
                    $zoom: { max: 14 }
                draw:
                    icons:
                        visible: false
            hide-until-z15-any:
                filter:
                    kind: [motorway_junction]
                    $zoom: { max: 15 }
                draw:
                    icons:
                        visible: false
            hide-until-z15-no-area:
                filter:
                    area: false
                    $zoom: { max: 15 }
                    kind: [park]
                draw:
                    icons:
                        visible: false
            hide-until-z15-with-area:
                filter:
                    area: true
                    $zoom: { max: 15 }
                    kind: [nursing_home]
                draw:
                    icons:
                        visible: false
            hide-until-z16-any:
                filter:
                    kind: [fire_station, grass, tram_stop, post_office]
                    $zoom: { max: 16 }
                draw:
                    icons:
                        visible: false
            hide-until-z16-no-area:
                filter:
                    area: false
                    # dissagreements over toilets
                    kind: [bicycle, allotments, college, garden, university, toilets]
                    $zoom: { max: 16 }
                draw:
                    icons:
                        visible: false
            # no POIs for commercial, residential
            hide-until-z17-any:
                filter:
                    $zoom: { max: 17 }
                    kind: [bank, bus_stop, car_sharing, wood, platform, cafe, restaurant, fast_food, bar, place_of_worship, police]
                draw:
                    icons:
                        visible: false
            hide-until-z17-with-area:
                filter:
                    area: true
                    $zoom: { max: 17 }
                    kind: [common, grass, houseboat, pedestrian, pitch, railway, ship, wetland]
                draw:
                    icons:
                        visible: false
            hide-until-z17-no-area:
                filter:
                    area: false
                    $zoom: { max: 17 }
                    # note: atm and drinking_water appear hear and in area versions
                    kind: [accountant, administrative, advertising_agency, animal, architect, association, atm, bakery, bed_and_breakfast, bicycle_rental_station, books, butcher, car, car_repair, chalet, clothes, company, computer, consulting, convenience, doityourself, drinking_water, dry_cleaning, educational_institution, emergency_phone, employment_agency, estate_agent, fashion, financial, florist, foundation, gift, government, greengrocer, guest_house, hairdresser, hostel, hotel, insurance, it, jewelry, lawyer, mast, memorial, mobile_phone, motel, newspaper, ngo, notary, optician, parking, pet, physician, political_party, post_box, religion, research, subway_entrance, tax_advisor, telecommunication, telephone, theatre, therapist, traffic_signals, travel_agent, water_tower]
                draw:
                    icons:
                        visible: false
            hide-until-z18-any:
                filter:
                    kind: [atm, bus_stop, drinking_water]
                    $zoom: { max: 18 }
                draw:
                    icons:
                        visible: false
            hide-until-z18-no-area:
                filter:
                    $zoom: { max: 18 }
                    area: false
                    kind: [bench, parking, waste_basket]
                draw:
                    icons:
                        visible: false
            hide-until-z19-any:
                filter:
                    $zoom: { max: 19 }
                    kind: [bicycle_parking, burial_vault, car_sharing]
                draw:
                    icons:
                        visible: false

            # hide based on kind and area filters
            military-early:
                filter:
                    kind: [military]
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [8], area: { max: 50000000 } }
                draw:
                    icons:
                        visible: false
            university-early:
                filter:
                    kind: [university, college]
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [11], area: { max: 2000000 } }
                        - { $zoom: [12], area: { max: 500000 } }
                draw:
                    icons:
                        visible: false
            school-early:
                filter:
                    kind: [school, kindergarten]
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [13], area: { max: 100000 } }
                        - { $zoom: [14], area: { max: 50000 } }
                        - { $zoom: [15], area: { max: 10000 } }
                        - { $zoom: [16], area: { max: 5000 } }
                        - { $zoom: [17], area: { max: 2000 } }
                draw:
                    icons:
                        visible: false
            garden-area-early:
                filter:
                    kind: [garden, allotments]
                    any:
                        # limit show smaller landuse areas to higher zooms
                        - { $zoom: [12], area: { max: 500000 } }
                        - { $zoom: [13], area: { max: 100000 } }
                        - { $zoom: [14], area: { max: 10000 } }
                        - { $zoom: [15], area: { max: 5000 } }
                draw:
                    icons:
                        visible: false
            cemetery-early:
                filter:
                    kind: [cemetery]
                    # limit show smaller landuse areas to higher zooms
                    any:
                        - { $zoom: [12], area: { max: 3000000 } }
                draw:
                    icons:
                        visible: false
            golf_course-early:
                filter:
                    kind: golf_course
                    any:
                        - { $zoom: [12], area: { max: 2500000 } }
                draw:
                    icons:
                        visible: false
            office-early:
                filter:
                    - { kind: [insurance, office, company], $zoom: [15], area: { max: 10000 } }
                    - { kind: [insurance, office, company], $zoom: [16], area: { max: 5000 } }
                draw:
                    icons:
                        visible: false
            landuse-labels-green-areas-not-national-park:
                filter:
                    kind: [park, conservation, protected_area, nature_reserve, forest, grass]
                    any:
                    # show labels for smaller landuse areas at higher zooms
                    - { $zoom: { max: 6 }, area: true }
                    - { $zoom: [6],    area: { max: 5000000000 } }
                    - { $zoom: [7],    area: { max: 5000000000 } }
                    - { $zoom: [8],    area: { max: 1000000000 } }
                    - { $zoom: [9],    area: { max: 100000000 } }
                    - { $zoom: [10],   area: { max: 50000000 } }
                    - { $zoom: [11],   area: { max: 20000000 } }
                    - { $zoom: [12],   area: { max: 5000000 } }
                    - { $zoom: [13],   area: { max: 200000 } }
                    - { $zoom: [14],   area: { max: 50000 } }
                    - { $zoom: [15],   area: { max: 5000 } }
                    - { $zoom: [16],   area: { max: 1000 } }
                draw:
                    icons:
                        visible: false
                wilderness-areas-early:
                    filter: function() { return $zoom < 9 && feature.name && (feature.name.indexOf("Wilderness") > -1 || feature.name.indexOf("BLM") > -1 || feature.protect_class == '1' || feature.protect_class == '1a' || feature.protect_class == '1b' ); }
                    draw:
                        icons:
                            visible: false
                not-national-park:
                    filter: function() { return feature.name && !((feature.name.indexOf("National Park") > -1) || feature.name.indexOf("National Monument") > -1); }
                    early:
                        filter: { $zoom: { max: 8 } }
                        draw:
                            icons:
                                visible: false
            landuse-labels-not-any-above:
                filter:
                    $zoom: { max: 6 }
                    not: { kind: [aerodrome, airport, allotments, aquarium, attraction, battlefield, beach, cemetery, college, conservation, forest, garden, glacier, golf_course, grass, kindergarten, landmark, maze, national_park, nature_reserve, park, playground, protected_area, resort, school, stadium, station, theme_park, university, winery, winter_sports, zoo] }
                draw:
                    icons:
                        visible: false
            glacier:
                filter: { $zoom: { max: 14 }, kind: glacier, area: false }
                draw:
                    icons:
                        visible: false


        # set special priority, sprite, and text styles per kind
        has-area:
            filter: { area: true }
            draw:
                icons:
                    priority: 41

        national-park-protected-areas:
            filter:
                kind: national_park
            draw:
                icons:
                    visible: global.icon_visible_landuse_green
                    size: global.icon_size_green
                    sprite: park
                    priority: 41
                    text:
                        visible: global.text_visible_landuse_green
                        font:
                            fill: global.text_fill_park
                            style: italic
            # large park icon
            # z14-parks:
            #     filter: { $zoom: { min: 14 } }
            #     draw:
            #         icons:
            #             sprite: park-l
            #             size: [[14,24px],[16,32px]]
        parks:
            filter:
                - kind: [park, conservation, grass]
                - { kind: protected_area, not: { protect_class: [6, '6'] } }
            draw:
                icons:
                    visible: global.icon_visible_landuse_green
                    size: global.icon_size_green
                    sprite: park
                    priority: 41
                    text:
                        visible: global.text_visible_landuse_green
                        font:
                            fill: global.text_fill_park
                            style: italic

            only-text-later:
                filter: { kind: [grass], $zoom: { min: 16 } }
                draw:
                    icons:
                        size: 0px
                        text:
                            font:
                                style: italic
        forest:
            filter:
                - kind: forest
                - { kind: protected_area, protect_class: [6, '6'] }
            draw:
                icons:
                    visible: global.icon_visible_landuse_green
                    size: global.icon_size_green
                    sprite: forest
                    priority: 41
                    text:
                        visible: global.text_visible_landuse_green
                        font:
                            fill: global.text_fill_park
                            style: italic
#        wilderness-nature_reserve:
#            filter:
#                - kind: nature_reserve
#            draw:
#                icons:
#                    visible: global.icon_visible_landuse_green
#                    size: global.icon_size_green
#                    sprite: forest
#                    priority: 41
#                    text:
#                        visible: global.text_visible_landuse_green
#                        font:
#                            fill: global.text_fill_park
#                            style: italic

        beach:
            filter:
                kind: [beach]
            draw:
                icons:
                    visible: global.icon_visible_landuse_green
                    size: global.icon_size_green
                    text:
                        visible: global.text_visible_landuse_green
                        font:
                            fill: global.text_fill_beach
        airport:
            filter:
                kind: [airport, aerodrome]
            draw:
                icons:
                    visible: global.icon_visible_landuse_green
                    size: global.icon_size_green
                    priority: 42
                    text:
                        visible: global.text_visible_landuse_green
                        text_source: global.ux_language_text_source_iata
            early:
                filter: { $zoom: [9,10,11] }
                draw: { icons: { text: { text_source: iata } } }
            early2:
                filter: { $zoom: { min: 12 } }
                draw: { icons: { text: { font: { size: 11px } } } }
        enclosure-related:
            filter:
                kind: [enclosure, animal]
            draw:
                icons:
                    priority: 43
                    size: 0px
                    #: dot-black
                    text:
                        text_wrap: 10
                        font:
                            style: italic
                            weight: normal
        glacier:
            filter:
                kind: glacier
            draw:
                icons:
                    size: 0px
                    #visible: false
                    text:
                        visible: true
                        priority: 44
                        text_wrap: 10
                        font:
                            weight: normal
                            style: italic
                            fill: global.text_fill_park

        # landuse-labels-not-any-above:
        #     filter:
        #         not: { kind: [aerodrome, airport, allotments, aquarium, attraction, battlefield, beach, cemetery, college, conservation, forest, garden, glacier, golf_course, grass, kindergarten, landmark, maze, national_park, nature_reserve, park, playground, protected_area, resort, school, stadium, station, theme_park, university, winery, winter_sports, zoo] }
        #     draw:
        #         icons:
        #             priority: 43

        building-like:
            filter: { kind: [commercial,residential,warehouse,public,dormitory], osm_relation: false }
            draw:
                icons:
                    sprite: building

        station-train-subway:
            filter: { kind: [station, train_station] }
            draw:
                icons:
                    visible: global.icon_visible_station
                    size: [[13, 12px], [14, 12px], [15, 16px], [17, 18px], [18, 20px]]
                    priority: 44
                    text:
                        visible: global.text_visible_station
            station-early:
                filter:
                    $zoom: { max: 11 }
                draw:
                    icons:
                        visible: false
            # for a transit style we'd want to see **all**, so don't move this above (it's special to this style)
            low-priority-early:
                filter: { kind_tile_rank: { min: 5 }, $zoom: { min: 0, max: 13 } }
                draw:
                    icons:
                        visible: false
            low-priority-early-z13:
                filter: { kind_tile_rank: { min: 5 }, $zoom: [13] }
                draw:
                    icons:
                        visible: false
            low-priority-early-z14:
                filter: { kind_tile_rank: { min: 7 }, $zoom: [14] }
                draw:
                    icons:
                        text: { visible: false }

        tram-stop-early:
            filter: { kind: tram_stop, $zoom: { max: 15 } }
            draw:
                icons:
                    visible: false
                    text:
                        visible: false
        tram-stop:
            filter: { kind: tram_stop, $zoom: { min: 15 } }
            draw:
                icons:
                    size: [[16, 12px], [17, 18px]]

        garden-no-area-early:
            filter: { kind: [garden, allotments], $zoom: [16], area: false }
            draw:
                icons:
                    priority: 45
                    size: 14px
                    text:  { font: { size: 10px, style: italic } }
        garden-no-area-later:
            filter: { kind: [garden, allotments], $zoom: { min: 17 }, area: false }
            draw:
                icons:
                    priority: 45
                    size: 16px
                    text:  { font: { size: 11px, style: italic } }
        gate:
            filter: { kind: gate, name: true  }
            draw: { icons: { sprite: generic } }

        parking-labels:
            filter:
                kind: [parking]
                $zoom: { min: 18 }
            draw:
                icons:
                    text:
                        visible: global.text_visible_poi_landuse
                        font:
                            size: 10px
        tower:
            filter: { kind: [tower], label_placement: true }
            draw:
                icons:
                    size: 0px
                    #visible: false
                    text:
                        font:
                            style: italic

        # TODO: this isn't working, should see small icons near the transbay terminal in SF
        bus_stop:
            filter:
                kind: [bus_stop]
            draw:
                icons:
                    size: 14px
                    text:
                        font:
                            size: 11px
                            weight: normal
            later:
                filter: { $zoom: { max: 19 } }
                draw:
                    icons:
                        text:
                            visible: false

        airport-gate:
            filter: { kind: aeroway_gate }
            draw:
                icons:
                    visible: false
                text-blend-order:
                    visible: global.text_visible_airport_gate
                    text_source: ref
                    priority: 63
                    font:
                        fill: global.text_fill_exits
                        size: [[16,9px],[17,12px],[20,14px]]
            later:
                filter: { $zoom: { min: 19 } }
                draw:
                    icons:
                        text:
                            font:
                                weight: 600

        highway-exit:
            filter: { kind: motorway_junction, $zoom: { min: 16 } }
            draw:
                icons:
                    visible: false
                text-blend-order:
                    visible: global.text_visible_exits
                    text_source: ref
                    priority: 63
                    font:
                        fill: global.text_fill_exits
                        size: [[12,9px],[15,12px],[17,14px]]
                        stroke: { color: global.text_stroke, width: [[12,2px],[14,3px],[15,3px]] }
            later:
                filter: { $zoom: { min: 16 } }
                draw:
                    icons:
                        text:
                            font:
                                weight: 600

    transit-overlay-station-labels:
        data: { source: mapzen, layer: pois }
        enabled: global.sdk_transit_overlay
        filter:
            kind: [station, tram_stop, bus_station, subway_entrance, halt, stop, platform, bus_stop, stop_position ]
        draw:
            icons:
                visible: true
                size: [[13, 12px], [16, 16px], [19, 20px]]
                interactive: global.sdk_interactive
                priority: 15
                text:
                    buffer: 4px
                    move_into_tile: false # preserves text alignment w/icons in JS
                    #anchor: bottom
                    #offset: [[13, [0, 6px]], [16, [0, 8px]], [19, [0, 10px]]] # offset tracks alongside icon size (half icon height)
                    priority: 16
                    visible: true
                    font:
                        fill: black
                        weight: normal
                        size: 11px
                        stroke: { color: white, width: 3 }
        poi_labels-z14:
            filter: { $zoom: [14] }
            draw: { icons: { text: { font: { size: 11px } } } }
        poi_labels-z15:
            filter: { $zoom: [15,16,17] }
            draw: { icons: { text: { font: { size: 12px, stroke: { width: 2 } } } } }
        poi_labels-z18:
            filter: { $zoom: [18,19] }
            draw: { icons: { text: { font: { size: 12px, weight: 600, stroke: { width: 3 } } } } }
        poi_labels-z20-up:
            filter: { $zoom: { min: 20 } }
            draw: { icons: { text: { font: { size: 14px, weight: 600, stroke: { width: 3 }  } } } }
        station-train-subway:
            filter: { kind: [station, train-station, train_station] } #, $zoom: { min: 13 }
            draw:
                icons:
                    sprite: train_station
                    visible: true
                    size: [[13, 12px], [14, 14px], [15, 16px], [17, 20px]]
                    priority: 11
                    text:
                        visible: true
                        #offset: [[13, [0, 6px]], [14, [0, 7px]],[15, [0, 8px]], [17, [0, 10px]]]
                        priority: 12
            low-priority-early:
                filter: { kind_tile_rank: { min: 3 }, $zoom: { min: 0, max: 12 } }
                draw:
                    icons:
                        size: [[12, 5px], [14, 6px], [15, 16px]]
                        text:
                            visible: false
                long-tail:
                    filter: { kind_tile_rank: { min: 10 }, $zoom: [10] }
                    draw:
                        icons:
                            visible: false
            low-priority-early-z12:
                filter: { kind_tile_rank: { min: 8 }, $zoom: [12] }
                draw:
                    icons:
#                        visible: false
                        size: [[12, 5px], [14, 6px], [15, 16px]]
                        text:
                            visible: false
            low-priority-early-z13:
                filter: { kind_tile_rank: { min: 8 }, $zoom: [13] }
                draw:
                    icons:
                        #visible: false
                        size: [[12, 8px], [14, 6px], [15, 16px]]
                        text:
                            visible: false
            low-priority-early-z14:
                filter: { kind_tile_rank: { min: 7 }, $zoom: [14] }
                draw:
                    icons:
                        size: [[12, 10px], [14, 11px], [15, 16px]]
                        #visible: false
                        text:
                            visible: false
            late:
                filter: { $zoom: { min: 16 } }
                draw:
                    icons:
                        text:
                            font:
                                weight: 600
                                size: 12px
        subway-early:
            filter: { is_subway: true, is_train: false, $zoom: { max: 12 } }
            draw:
                icons:
                    visible: false
        halt-early:
            filter: { kind: [halt,stop], $zoom: { max: 15 } }
            draw:
                icons:
                    size: [[15, 8px], [16, 18px]]
                    sprite: light_rail
                    text:
                        visible: false
        platform-early:
            filter: { kind: [platform] }
            draw:
                icons:
                    size: [[15, 8px], [16, 18px]]
                    sprite: generic
                    text:
                        visible: false
        tram-stop-early:
            filter: { kind: [tram_stop], $zoom: { max: 16 } }
            draw:
                icons:
                    size: [[13, 0px], [14, 7px], [15, 8px]]
                    sprite: light_rail
                    text:
                        visible: false
        tram-stop:
            filter: { kind: tram_stop, $zoom: { min: 16 } }
            draw:
                icons:
                    size: [[16, 12px], [17, 14px], [18, 18px]]
                    sprite: light_rail
                    #text:
                        #offset: [[13, [0, 6px]], [16, [0, 9px]]]
        bus-like-labels:
            filter:
                kind: [platform, stop_position]
            draw:
                icons:
                    size: [[13, 8px], [16, 10px], [17, 12px], [18, 18px]]
                    sprite: bus_station
                    text:
                        font:
                            fill: black
                            size: 12px
                            stroke: { color: white, width: 4 }
        bus-station-labels:
            filter:
                kind: [bus_station, bus_stop]
                $zoom: { min: 16 }
            draw:
                icons:
                    size: [[13, 12px], [16, 18px]]
                    sprite: bus_station
                    priority: 17
                    text:
                        priority: 18
                        font:
                            fill: black
                            size: 12px
                            stroke: { color: white, width: 4 }
            bus_stop:
                filter:
                    kind: [bus_stop]
                    $zoom: { max: 19 }
                draw:
                    icons:
                        size: [[13, 8px], [19, 18px]]
                        text:
                            visible: false
        subway-entrance:
            filter:
                kind: [subway_entrance]
            draw:
                icons:
                    sprite: subway_entrance
                    size: [[17, 12px], [19, 14px]]
                    priority: 19
                    text:
                        #offset: [[17, [0, 6px]], [19, [0, 7px]]] # offset tracks alongside icon size (half icon height)
                        priority: 20
                        text_source: function() { if( feature.ref || feature.name ) { if( feature.ref && feature.name ) { return '[' + feature.ref + ']\n' + feature.name; } else { return feature.name; } } else { return "Entrance"; } }
                        font:
                            fill: black
                            size: 12px
                            stroke: { color: white, width: 4 }

    landuse:
        data: { source: mapzen, layer: landuse }
        draw:
            terrain:
                order: function() { return feature.sort_rank || 0; }
                visible: false
            terrain-park:
                order: function() { return feature.sort_rank || 0; }
                visible: false
            lines:
                order: function() { return feature.sort_rank || 0; }

        landuse-labels:
            filter:
                all:
                    - label_placement: true
                    - name: true
            draw:
                text-blend-order:
                    text_source: global.ux_language_text_source
                    interactive: global.sdk_interactive
                    move_into_tile: true
                    priority: 100
                    visible: global.text_visible_landuse_generic
                    font:
                        fill: '#666'
                        family: global.text_font_family
                        style: italic
                        size: 11px
                        stroke: { color: global.text_stroke_address, width: 1 }

            show-with-icon:
                filter: { kind: [allotments] }
                draw:
                    text-blend-order:
                        visible: false
                    icons:
                        visible: global.icon_visible_poi_landuse
                        size: [[13, 18px], [16, 18px], [18, 22px]]
                        sprite: function() { return feature.kind; }
                        sprite_default: generic
                        interactive: global.sdk_interactive
                        priority: 65 #function() { return (feature.min_zoom && Math.floor(feature.min_zoom * 1000)) || 65; }
                        repeat_group: abc
                        buffer: 7px
                        text:
                            visible: global.text_visible_poi_landuse
                            text_source: global.ux_language_text_source
                            text_wrap: 18
                            max_lines: 3
                            font:
                                family: global.text_font_family
                                weight: 600
                                fill: [0.10,0.10,0.10]
                                size: [[13,10px],[14,10px],[18,11px]]
                                stroke: { color: global.text_stroke, width: 3 }
#        tier1:
            # filter:
            #     any:
            #         # limit show smaller landuse areas to higher zooms
            #         - { $zoom: { min: 3 },  area: { min: 300000000 } }
            #         - { $zoom: { min: 4 },  area: { min: 300000000 } }
            #         - { $zoom: { min: 5 },  area: { min: 150000000 } }
            #         - { $zoom: { min: 6 },  area: { min: 150000000 } }
            #         - { $zoom: { min: 7 },  area: { min: 100000000 } }
            #         - { $zoom: { min: 8 },  area: { min: 10000000 } }
            #         - { $zoom: { min: 9 },  area: { min: 5000000 } }
            #         - { $zoom: { min: 10 }, area: { min: 1000000 } }
            #         - { $zoom: { min: 11 }, area: { min: 500000 } }
            #         - { $zoom: { min: 12 }, area: { min: 500000 } }
            #         - { $zoom: { min: 13 }, area: { min: 100000 } }
            #         - { $zoom: { min: 14 }, area: { min: 50000 } }
            #         - { $zoom: { min: 15 }, area: { min: 20000 } }
            #         - { $zoom: { min: 15 }, area: { min: 2000 } }
            #         - { $zoom: { min: 16 } }

        national_park:
            filter:
                all:
                    - kind: [national_park, battlefield, protected_area]
                any:
                    - not: { operator: [ "United States Forest Service" ] }
                    - protect_class: ['2','3','5']
            draw:
                terrain-park:
                    interactive: false
                    color: [0.890,1.00,1.00]
                    # todo: what is this?
                    #order: 18
                    visible: true
            us_national_park:
                # yosemite national park, death valley national park, grand canyon national park
                filter:
                    any:
                        - operator: [ "United States National Park Service" ]
                        - protect_class: ['2','3','5']
                draw:
                    terrain-park:
                        visible: true
                        color: [0.920,1.000,1.000]

#        tier2:
            # filter:
            #     any:
            #         # limit show smaller landuse areas to higher zooms
            #         - { $zoom: { min: 4 },  area: { min: 1000000000 } }
            #         - { $zoom: { min: 5 },  area: { min: 1000000000 } }
            #         - { $zoom: { min: 6 },  area: { min: 150000000 } }
            #         - { $zoom: { min: 7 },  area: { min: 100000000 } }
            #         - { $zoom: { min: 8 },  area: { min: 10000000 } }
            #         - { $zoom: { min: 9 },  area: { min: 5000000 } }
            #         - { $zoom: { min: 10 }, area: { min: 1000000 } }
            #         - { $zoom: { min: 11 }, area: { min: 500000 } }
            #         - { $zoom: { min: 12 }, area: { min: 250000 } }
            #         - { $zoom: { min: 13 }, area: { min: 100000 } }
            #         - { $zoom: { min: 14 }, area: { min: 50000 } }
            #         - { $zoom: { min: 15 }, area: { min: 20000 } }
            #         - { $zoom: { min: 15 }, area: { min: 2000 } }
            #         - { $zoom: { min: 16 } }

        # effectively wilderness
        conservation:
            filter:
                all:
                    - $zoom: { min: 4 }
                    - kind: [protected_area, nature_reserve, national_park]
                    - not: { protect_class: [2,3,5]}
            draw:
                terrain-park:
                    #color: [0.880,0.990,0.880]
                    color: [1.000,1.000,0.930]
                    visible: true
                # outline:
                #     style: lines
                #     color: global.green6
                #     width: [[9,0px],[10,2px],[12,4px]]

        national_forest_level_6:
            filter:
                all:
                    - kind: forest
                any:
                    - protect_class: ['6']
                    - operator: ['United States Forest Service']
            draw:
                terrain-park:
                    color: [0.995,1.000,0.985] #global.green7
                    visible: true

        parks-and-national-forests-not-national-park:
            filter:
                all:
                    - $zoom: { min: 4 }
                    - kind: [park, national_park]
                any:
                    - not: { operator: [ "United States National Park Service", "United States Forest Service" ] }
                    - not: { protect_class: ['2','3','5','6'] }
            # default for national forests and more?
            draw:
                terrain-park:
                    # color: [0.880,1.000,0.950]
                    color: [0.940,1.000,0.970] #[[4, [0.900,1.000,0.990]], [13, [0.827,0.941,0.894]]]
                    # color: [1.0,1.0,1.0]
                    visible: true
            national_park:
                #filter: function() { return feature.name && (feature.name.indexOf('National Park') > -1); }
                filter:
                    all:
                        - kind: national_park
                        - not: [ protect_class: ['2','3','5','6'], operator: [ "United States National Park Service"] ]
                draw:
                    terrain-park:
                        color: [0.890,1.00,1.00]
                        visible: true


        # gotta be a protected area to draw green, not just a landcover type
        farm:
            filter:
                kind: [farm, farmland]
                $zoom: { min: 10}
            draw:
                polygons:
                    color: [1.00,1.00,1.00]
                    visible: global.green4_v
        forest:
            filter: { kind: [forest, wood, natural_wood, natural_forest, natural_park], $zoom: { min: 10 }, not: { operator: [ "United States Forest Service"] } }
            draw:
                terrain-park:
                    color: [0.946,1.000,0.966]
                    visible: true

        # nature_reserve:
        #     filter: { kind: nature_reserve, $zoom: { min: 7 } }
        #     draw:
        #         terrain-grid:
        #             order: function() { return feature.sort_rank; }
        #     wilderness-areas:
        #         filter: function() { return feature.name && feature.name.indexOf("Wilderness") > -1 }
        #         draw:
        #             terrain:
        #                 color: [0.890,0.973,0.886]
        #             # outline:
        #             #     style: lines
        #             #     color: red
        #             #     width: [[9,1px],[10,2px],[12,4px]]

        # parks-and-national-forests-not-national-park:
        #     filter: { $zoom: { min: 4 }, kind: [park, national_park, "park or protected land", battlefield], not: { operator: [ "United States National Park Service", "US National Park Service" ] } }
        #     # default for national forests and more?
        #     draw:
        #         terrain:
        #             color: [0.880,1.000,0.950]
        #             # color: [0.850,1.000,0.938]
        #             # color: [0.860,0.993,1.000]
        #             # color: [0.915,0.995,0.995]
        #             visible: true


        # urban:
        #     filter: { kind: [urban, rural, residential] }
        #     visible: global.earth2_v
        #     draw:
        #         polygons:
        #             color: [1.00,1.00,1.00]
        #             visible: global.earth2_v
        #tier3:
            # filter:
            #     any:
            #         # limit show smaller landuse areas to higher zooms
            #         - { $zoom: { min: 8 },  area: { min: 10000000 } }
            #         - { $zoom: { min: 9 },  area: { min: 5000000 } }
            #         - { $zoom: { min: 10 }, area: { min: 1000000 } }
            #         - { $zoom: { min: 11 }, area: { min: 500000 } }
            #         - { $zoom: { min: 12 }, area: { min: 500000 } }
            #         - { $zoom: { min: 13 }, area: { min: 100000 } }
            #         - { $zoom: { min: 14 }, area: { min: 50000 } }
            #         - { $zoom: { min: 15 }, area: { min: 20000 } }
            #         - { $zoom: { min: 15 }, area: { min: 2000 } }
            #         - { $zoom: { min: 16 } }
        airport:
            filter:
                kind: aerodrome
            draw:
                terrain:
                    color: global.gray-all
                    visible: global.purple_v
        military:
            filter:
                kind: military
            draw:
                terrain:
                    color: global.gray-all
                    visible: true
        university:
            filter:
                kind: [university, college]
            draw:
                terrain:
                    color: global.gray-all
                    visible: true
        #tier4:
            # filter:
            #     any:
            #         # limit show smaller landuse areas to higher zooms
            #         - { $zoom: { min: 10 }, area: { min: 1000000 } }
            #         - { $zoom: { min: 11 }, area: { min: 500000 } }
            #         - { $zoom: { min: 12 }, area: { min: 500000 } }
            #         - { $zoom: { min: 13 }, area: { min: 100000 } }
            #         - { $zoom: { min: 14 }, area: { min: 50000 } }
            #         - { $zoom: { min: 15 }, area: { min: 20000 } }
            #         - { $zoom: { min: 15 }, area: { min: 2000 } }
            #         - { $zoom: { min: 16 } }
        cemetery:
            filter:
                kind: cemetery
            draw:
                terrain-park:
                    color: [0.982,1.000,0.960]
                    visible: true
        golf_course:
            filter:
                kind: golf_course
            draw:
                terrain-park:
                    color: [0.890,1.000,0.892]
                    # color: [0.840,1.000,0.907]
                    visible: true
        hospital:
            filter:
                kind: hospital
            draw:
                terrain:
                    color: [0.988,0.938,0.953]
                    visible: true
        industrial:
            filter:
                kind: industrial
            draw:
                terrain:
                    color: global.gray-all
                    visible: true
        power:
            filter: { kind: [plant, generator, substation] }
            draw:
                terrain:
                    color: global.gray-all
                    visible: true
        railway:
            filter:
                kind: railway
            draw:
                terrain:
                    color: global.gray-all
                    visible: true
    # IGNORE THIS FOR NOW
    #     sports_centre:
    #         filter:
    #             kind: sports_centre
    #         draw:
    #             polygons:
    #                 color: [1.0,1.0,1.0]
        recreation_ground:
            filter:
                kind: recreation_ground
            draw:
                terrain:
                    color: [0.945,0.995,0.945]
                    visible: true
        stadium:
            filter:
                kind: stadium
            draw:
                terrain:
                    color: global.gray-all
                    visible: true
        zoo:
            filter:
                kind: [zoo, wildlife_park]
            draw:
                terrain:
                    color: [0.830,1.000,0.972]
                    visible: true
        winter_sports:
            filter:
                kind: winter_sports
            draw:
                terrain:
                    color: [1.0,1.0,1.0]
                    visible: global.grey8_v
        man-made:
            filter: { kind: [pier,wastewater_plant,works,bridge,tower,breakwater,water_works,groyne,dike,cutline] }
            draw:
                terrain:
                    color: global.gray-all
                    visible: true
            pier:
                filter: { kind: [pier,bridge,breakwater,groyne,dike,cutline] }
                draw:
                    terrain:
                        color: [1.000,0.973,0.930]
                        visible: true
        camp_site:
            filter: { kind: camp_site }
            draw:
                terrain:
                    color: global.gray-all
                    visible: true

        #tier5:
            # filter:
            #     any:
            #         # limit show smaller landuse areas to higher zooms
            #         - { $zoom: { min: 10 }, area: { min: 1000000 } }
            #         - { $zoom: { min: 11 }, area: { min: 400000 } }
            #         - { $zoom: { min: 12 }, area: { min: 200000 } }
            #         - { $zoom: { min: 13 }, area: { min: 50000 } }
            #         - { $zoom: { min: 14 }, area: { min: 20000 } }
            #         - { $zoom: { min: 15 }, area: { min: 10000 } }
            #         - { $zoom: { min: 15 }, area: { min: 2000 } }
            #         - { $zoom: { min: 16 } }
            #     all:
            #         - kind:
            #             - theme_park
            #             - resort
            #             - aquarium
            #             - winery
            #             - maze
            #             - beach
        tourism-related:
            filter:
                kind:
                    - theme_park
                    - resort
                    - aquarium
                    - winery
                    - maze
            draw:
                terrain:
                    color: global.gray-all
                    visible: true
        beach:
            filter:
                kind: beach
            draw:
                terrain:
                    color: [1.000,0.953,0.900]
                    # color: [0.975,0.975,0.828]
                    visible: true
        #tier6:
            # filter:
            #     any:
            #         # limit show smaller landuse areas to higher zooms
            #         - { $zoom: { min: 12 }, area: { min: 500000 } }
            #         - { $zoom: { min: 13 }, area: { min: 100000 } }
            #         - { $zoom: { min: 14 }, area: { min: 50000 } }
            #         - { $zoom: { min: 15 }, area: { min: 20000 } }
            #         - { $zoom: { min: 15 }, area: { min: 2000 } }
            #         - { $zoom: { min: 16 } }
        garden:
            filter:
                kind: [garden, allotments]
            draw:
                terrain:
                    color: [0.790,0.973,0.896]
                    visible: true
        parking:
            filter:
                all:
                    - kind: parking
                    - $zoom: { min: 14 }
                any:
                    - { $zoom: { min: 14 }, area: { min: 10000 } }
                    - { $zoom: { min: 15 }, area: { min: 5000 } }
            draw:
                terrain:
                    color: global.gray-all
                    visible: global.grey1_v
            early:
                filter: { $zoom: { max: 15 } }
                draw:
                    terrain:
                        color: [0.950,0.950,0.950]
                        visible: true

        pedestrian:
            filter:
                kind: [pedestrian,common]
            draw:
                terrain:
                    color: [0.945,0.995,0.945]
                    visible: global.grey1_v
            green-stuff:
                filter:
                    surface: [grass]
                draw:
                    terrain:
                        color: [0.791,0.953,0.883]

        glacier:
            filter:
                kind: glacier
            draw:
                terrain:
                    color: [0.890,0.970,1.000]
                    # color: [0.975,0.975,0.828]
                    visible: true

        minor_green_stuff:
            filter:
                kind: [pitch, meadow, village_green, grass, farmland, playground]
            draw:
                terrain-park:
                    color: [0.808,0.962,0.951]
                    visible: true
            farmland_friends:
                filter: { kind: [farmland] }
                draw:
                    terrain-park:
                        color: [1.000,1.000,1.000]
                        #visible: false
            meadow_friends:
                filter: { kind: [meadow, grass] }
                draw:
                    terrain-park:
                        color: [0.900,1.000,0.955]
            pitch_later:
                filter: { kind: pitch, $zoom: { min: 17 } }
                draw:
                    lines:
                        color: [0.526,0.809,0.752]
                        order: 500
                        width: 0.5m

        wetland:
            filter:
                kind: [wetland]
            draw:
                terrain:
                    color: [0.930,0.973,0.980]
                    visible: true
        scrub:
            filter:
                kind: [scrub]
            draw:
                terrain:
                    color: [1.000,0.973,0.930]
                    # color: [0.975,0.975,0.828]
                    visible: true
            later:
                filter: { $zoom: { min: 15 } }
                draw:
                    lines:
                        color: blue
                        width: 0.5px

        minor_other_stuff:
            filter:
                kind: [scree, farmyard]
            draw:
                terrain:
                    color: [1.000,0.953,0.900]
                    visible: true
            later:
                filter: { $zoom: { min: 15 } }
                draw:
                    lines:
                        color: red
                        width: 0.5px

            place_of_worship:
                filter:
                    kind: place_of_worship
                draw:
                    terrain:
                        color: global.gray-all
                        visible: global.grey1_v
            playground:
                filter:
                    kind: playground
                draw:
                    terrain:
                        color: [0.795,1.000,0.955]
                        visible: true
            school:
                filter:
                    kind: school
                draw:
                    terrain:
                        color: global.gray-all
                        visible: true

            minor-landuse:
                filter:
                    kind:
                        - attraction
                        - artwork
                        - wilderness_hut
                        - hanami
                draw:
                    terrain:
                        color: [0.795,1.000,0.955]
                        visible: true

        # GO MELLOW
        # 18/41.19776/-8.68722
        tree_row:
            filter:
                kind: tree_row
            draw:
                lines:
                    order: 501 # function() { return feature.sort_rank; }
                    color: [0.602,0.860,0.722]
                    width: [[16,1px],[17,2px],[19,1.5m]]
                    visible: true
        # GO MELLOW
        # 20/37.76779/-122.40096
        hedge:
            filter:
                kind: hedge
            draw:
                lines:
                    order: 500 # function() { return feature.sort_rank; }
                    color: [0.602,0.860,0.722]
                    width: [[16,0.5px],[17,1px],[19,1m]]
                    visible: true

        city_walls:
            filter: { kind: city_wall }
            draw:
                lines:
                    color: global.city_wall
                    width: [[12, 0.75px], [13, 1.0px], [14, 1.2px], [15, 2.0px], [16, 2.5px], [19, 6m]]
        retaining_wall:
            filter: { kind: retaining_wall }
            draw:
                lines:
                    color: global.retaining_wall
                    width: [[14, 0.5px], [15, 1.0px], [16, 1.5px], [17, 2.0px], [19, 4m]]
        snow_fence:
            filter: { kind: snow_fence }
            draw:
                lines:
                    color: global.snow_fence
                    width: [[14, 0.5px], [15, 1.0px], [16, 1.5px], [17, 2.0px], [19, 1.5m]]
        fence:
            filter: { kind: fence }
            draw:
                lines:
                    color: [[14,[0.770,0.765,0.755]],[18,[0.770,0.765,0.755]],[19,[0.841,0.837,0.824]]]
                    width: [[14, 0.5px], [15, 0.75px], [16, 0.75px], [18, 1.5px], [19, 1m]]
        dam:
            filter: { kind: dam }
            draw:
                lines:
                    color: global.dam
                    width: [[14, 0.5px], [15, 1.0px], [16, 1.5px], [17, 2.0px], [19, 1.5m]]


    transit:
        data: { source: mapzen, layer: transit }
        filter:
            all:
                - not: { kind: [platform] }

        # not transit mode
        subway-light-rail:
            filter: { $zoom: { min: 14 } }
            draw:
                lines:
                    order: function() { return feature.sort_rank || 275; }
            railway:
                filter: { kind: [railway,train] }
                draw:
                    lines:
                        color: [[14,[0.653,0.758,0.786]], [17,[0.670,0.777,0.807]]]
                        width: [[14,0.4px],[15,0.75px],[16,1.1px],[18,2px],[19,1m]]
            subway:
                filter: { kind: subway }
                draw:
                    lines:
                        color: [[14,[0.653,0.758,0.786]], [17,[0.670,0.777,0.807]]]
                        width: [[14,0.4px],[15,0.75px],[16,1.3px],[17,1.5px],[18,2m]]
            light_rail:
                filter: { kind: [light_rail,tram], $zoom: { min: 15 } }
                draw:
                    lines:
                        order: 415
                        color: [[14,[0.653,0.758,0.786]], [17,[0.670,0.777,0.807]]]
                        width: [[14,0px],[15,0.6px],[16,0.75px],[17,1.5px],[19,1m]]

        transit mode:
            enabled: global.sdk_transit_overlay
            draw:
                lines:
                    order: 499
                    color: purple
                    width: [[5,1.5px],[6,2px],[11,3px],[18,4px]]
                    outline:
                        color: [1.,1.,1.,.8]
                        width: [[7,0px],[8,0.25px],[9,0.5px],[12,1.0px],[13,1.75px],[14,2px]]
                        #width: [[12,1.0px],[13,1.75px],[14,2px]]
            train-sizing-color:
                filter: { kind: train }
                draw:
                    lines:
                        color: purple
                        width: [[5,1.0px],[6,1.0px],[7,1.25px],[11,2.0px],[13,2.5px],[18,3.5px]]
                        outline:
                            width: [[12,1.0px],[13,1.75px],[14,2px]]
                stack-below-other-transit-later-zooms:
                    filter: { $zoom: { min: 9 } }
                    draw:
                        lines:
                            order: 511
            subway-sizing:
                filter: { kind: subway }
                draw:
                    lines:
                        width: [[9,1px],[11,2px],[12,3px],[13,4px],[15,5px],[16,7px],[17,9px]]
                        outline:
                            #color: [[10,white],[11,black]]
                            width: [[9,0px],[10,0.5px],[12,1.25px],[13,1.5px],[15,2px]]
                            #width: [[12,1.5px],[13,2.0px],[14,2.5px]]
            light-rail-and-tram-sizing:
                filter: { kind: [light_rail, tram] }
                draw:
                    lines:
                        width: [[10,1px],[12,1.5px],[15,2px],[18,3.5px]]
                        outline:
                            #color: [[11,white],[12,black]]
                            width: [[12,0.25px],[13,0.5px],[14,1px],[16,2px]]
            has-data-color:
                filter: { colour: true }
                draw:
                    lines:
                        order: 510
                        width: [[9,2px],[11,3px],[12,4px]]
                        color: function() { return feature.colour || 'purple'; }
                        #outline:
                            #color: function() { if(feature.colour == 'silver') { return 'black'; } else { return [0.,0.,0.,.1]; } }
                            #width: [[12,1.0px],[13,1.75px],[14,2px]]
                train-with-color:
                    filter: { kind: train }
                    draw:
                        lines:
                            order: 514
                subway-with-color:
                    filter: { kind: subway }
                    draw:
                        lines:
                            order: 513
                light-rail-and-tram-with-color:
                    filter: { kind: [light_rail, tram] }
                    draw:
                        lines:
                            order: 512
            missing-colour:
                filter: { colour: false }
                train-missing-color:
                    filter: { kind: train, colour: false }
                    draw:
                        lines:
                            #width: [[5,1.25px],[6,1.75px],[11,2.0px],[13,2.5px],[18,2.5m]]
                            order: 506
                subway-missing-color:
                    filter: { kind: subway, colour: false }
                    draw:
                        lines:
                            order: 505
                            #outline:
    #                            width: [[12,1.5px],[13,2.0px],[14,2.5px]]
                light-rail-and-tram-missing-color:
                    filter: { kind: [light_rail, tram], colour: false }
                    draw:
                        lines:
                            order: 504


            labels-transit-lines:
                filter:
                    all:
                        - $zoom: { min: 13 }
                        - ref: true
                draw:
                    icons:
                        priority: 20
                        # you need to match any custom shield to the vector tile `network` values
                        sprite: function() { return ('sdk_shield-' + feature.ref.length + 'char'); }
                        sprite_default: sdk_shield_5char
                        color: function() { if ( feature.kind === 'train') { return 'purple' } else { return feature.colour || 'purple'; } }
                        # Size is specified below, and limited to 5 char in another filter
                        repeat_group: shields
                        repeat_distance: [[8,90px],[10,40px],[13,30px]]
                        placement: midpoint
                        placement_min_length_ratio:
                            - [8, 0.1]
                            - [9, 0.25]
                            - [10, 0.25]
                            - [11, 0.15]
                            - [12, 1]
                            - [13, 1.50]
                            - [14, 2.0]
                        cull_from_tile: true
    #                    visible: false
                        text:
                            offset: [0px, -0.5px]
                            repeat_distance: 200px
                            anchor: center
                            text_source: function() { if( feature.ref.length < 6 ) { return feature.ref; } else { return ''; } }
                            font:
                                family: Montserrat
                                fill: function() { if(feature.colour == 'yellow') { return '#555'; } else { return 'white'; } }
                                style: bold
                                size: [[7,7px],[12,8px],[16,11px]]

                width_1char:
                    filter: function() { return (feature.ref.length === 1); }
                    draw:
                        icons:
                            size: [[6,[16px,16px]],[13,[18px,18px]],[16,[21px,21px]]]
                width_2char:
                    filter: function() { return (feature.ref.length === 2); }
                    draw:
                        icons:
                            size: [[6,[21px,16px]],[13,[24px,18px]],[16,[28px,21px]]]
                width_3char:
                    filter: function() { return (feature.ref.length === 3); }
                    draw:
                        icons:
                            size: [[6,[27px,16px]],[13,[31px,18px]],[16,[36px,21px]]]
                width_4char:
                    filter: function() { return (feature.ref.length === 4); }
                    draw:
                        icons:
                            size: [[6,[32px,16px]],[13,[36px,18px]],[16,[41px,21px]]]
                    # London sucks
                    early:
                        filter: { $zoom: { max: 14 } }
                        draw:
                            icons:
                                visible: false
                width_5char:
                    filter: function() { return (feature.ref.length === 5); }
                    draw:
                        icons:
                            size: [[6,[37px,16px]],[13,[41px,18px]],[16,[48px,21px]]]
                    # London sucks
                    early:
                        filter: { $zoom: { max: 14 } }
                        draw:
                            icons:
                                visible: false
                # this is kinda a hack
                width_longggggg:
                    filter: function() { return (feature.ref.length > 5); }
                    draw:
                        icons:
                            visible: false

            z19-show-long-route-name:
                    filter:
                        $zoom: { min: 19 }
                    draw:
                        text:
                            font:
                                fill: black
                                style: italic
                                stroke: { color: white, width: 3px }


#    transit-bus-roads:
#        data: { source: mapzen, layer: roads }
#        filter: { is_bus_route: true }
#        draw:
#            lines:
#                visible: global.sdk_transit_overlay
#                interactive: false
#                color: [[13,[0,0,1,0.5]],[15,blue]]
#                width: [[11,0.5px],[12,0.8px],[16,1.25px],[18,1m]]
#                # let roads sort themselves past zoom 14
#                order: 488
#                # but give them all the same outline
#                outline:
#                    order: 487



#    transit-platforms:
#        data: { source: mapzen, layer: transit }
#        filter: { kind: platform, $zoom: { min: 15 }, $geometry: [polygon,line] }
#        draw:
#            lines:
#                visible: global.sdk_transit_overlay
#                color: '#bc8f96'
#                width: 10m          # something fishy here with the #include syntax in v0.7 tangram?
#                order: 1000         # this selection should sort above basemap, but grey Zinc color still applies
#                outline:
#                    order: 1002
#            polygons:
#                visible: global.sdk_transit_overlay
#                order: 1001
#        polygon_geom:
#            filter: { $geometry: polygon }
#            draw:
#                polygons:
#                    color: '#bc8f96'
#                    outline:
#                        color: '#bc8f96'
#                        width: [[15,0px],[16,0.5px],[17,1px],[19,2px]]
#                lines:
#                    visible: false
